
UART_IT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027d8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002898  08002898  00012898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028d0  080028d0  0002003c  2**0
                  CONTENTS
  4 .ARM          00000000  080028d0  080028d0  0002003c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080028d0  080028d0  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028d0  080028d0  000128d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080028d4  080028d4  000128d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  080028d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  2000003c  08002914  0002003c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  08002914  000200ec  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000063a0  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001407  00000000  00000000  00026404  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000688  00000000  00000000  00027810  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000600  00000000  00000000  00027e98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000181db  00000000  00000000  00028498  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000062bf  00000000  00000000  00040673  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008bcf4  00000000  00000000  00046932  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d2626  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000015e8  00000000  00000000  000d26a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000003c 	.word	0x2000003c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002880 	.word	0x08002880

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000040 	.word	0x20000040
 8000104:	08002880 	.word	0x08002880

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 f9de 	bl	80005e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f83e 	bl	80002a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f8ae 	bl	800038c <MX_GPIO_Init>
  MX_USART4_UART_Init();
 8000230:	f000 f87a 	bl	8000328 <MX_USART4_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  btn_cur = HAL_GPIO_ReadPin(BTN_GPIO_Port, BTN_Pin);/*Считываем состояние кнопки*/
 8000234:	2390      	movs	r3, #144	; 0x90
 8000236:	05db      	lsls	r3, r3, #23
 8000238:	2108      	movs	r1, #8
 800023a:	0018      	movs	r0, r3
 800023c:	f000 fd0a 	bl	8000c54 <HAL_GPIO_ReadPin>
 8000240:	0003      	movs	r3, r0
 8000242:	001a      	movs	r2, r3
 8000244:	4b12      	ldr	r3, [pc, #72]	; (8000290 <main+0x70>)
 8000246:	601a      	str	r2, [r3, #0]
		if ((btn_prev == 0) && (btn_cur != 0))/*Если предыдущие состояние 0,
 8000248:	4b12      	ldr	r3, [pc, #72]	; (8000294 <main+0x74>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	2b00      	cmp	r3, #0
 800024e:	d109      	bne.n	8000264 <main+0x44>
 8000250:	4b0f      	ldr	r3, [pc, #60]	; (8000290 <main+0x70>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	2b00      	cmp	r3, #0
 8000256:	d005      	beq.n	8000264 <main+0x44>
	  	т.е. кнопка не была нажата, и текущее состояние не равно 0, т.е. кнопка нажата*/ {
				  HAL_UART_Transmit_IT(&huart4, (uint8_t *)TxData, sizeof(TxData));/*Передадим массив TxData
 8000258:	490f      	ldr	r1, [pc, #60]	; (8000298 <main+0x78>)
 800025a:	4b10      	ldr	r3, [pc, #64]	; (800029c <main+0x7c>)
 800025c:	222d      	movs	r2, #45	; 0x2d
 800025e:	0018      	movs	r0, r3
 8000260:	f001 faa0 	bl	80017a4 <HAL_UART_Transmit_IT>
				  с контроллера на персональный компьютер*/
			  }
		btn_prev = btn_cur;/*Запоминаем текущее состояние кнопки, чтобы исключить ложное срабатывание светодиода,
 8000264:	4b0a      	ldr	r3, [pc, #40]	; (8000290 <main+0x70>)
 8000266:	681a      	ldr	r2, [r3, #0]
 8000268:	4b0a      	ldr	r3, [pc, #40]	; (8000294 <main+0x74>)
 800026a:	601a      	str	r2, [r3, #0]
			    если кнопка останется зажатой*/

		  if ((HAL_UART_Receive_IT (&huart4, RxData, sizeof(RxData))==HAL_OK) &&  (RxData[0] == '1'))/*Если
 800026c:	490c      	ldr	r1, [pc, #48]	; (80002a0 <main+0x80>)
 800026e:	4b0b      	ldr	r3, [pc, #44]	; (800029c <main+0x7c>)
 8000270:	2201      	movs	r2, #1
 8000272:	0018      	movs	r0, r3
 8000274:	f001 fb04 	bl	8001880 <HAL_UART_Receive_IT>
 8000278:	1e03      	subs	r3, r0, #0
 800027a:	d1db      	bne.n	8000234 <main+0x14>
 800027c:	4b08      	ldr	r3, [pc, #32]	; (80002a0 <main+0x80>)
 800027e:	781b      	ldrb	r3, [r3, #0]
 8000280:	2b31      	cmp	r3, #49	; 0x31
 8000282:	d1d7      	bne.n	8000234 <main+0x14>
		  данные с компьютера на контроллер были успешно переданы и первый элемент массива равен 1, то*/ {
			  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);/*Поменяем состояние светодиода*/
 8000284:	4b07      	ldr	r3, [pc, #28]	; (80002a4 <main+0x84>)
 8000286:	2104      	movs	r1, #4
 8000288:	0018      	movs	r0, r3
 800028a:	f000 fd1d 	bl	8000cc8 <HAL_GPIO_TogglePin>
	  btn_cur = HAL_GPIO_ReadPin(BTN_GPIO_Port, BTN_Pin);/*Считываем состояние кнопки*/
 800028e:	e7d1      	b.n	8000234 <main+0x14>
 8000290:	2000005c 	.word	0x2000005c
 8000294:	20000058 	.word	0x20000058
 8000298:	20000000 	.word	0x20000000
 800029c:	20000060 	.word	0x20000060
 80002a0:	200000e4 	.word	0x200000e4
 80002a4:	48000400 	.word	0x48000400

080002a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a8:	b590      	push	{r4, r7, lr}
 80002aa:	b093      	sub	sp, #76	; 0x4c
 80002ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ae:	2414      	movs	r4, #20
 80002b0:	193b      	adds	r3, r7, r4
 80002b2:	0018      	movs	r0, r3
 80002b4:	2334      	movs	r3, #52	; 0x34
 80002b6:	001a      	movs	r2, r3
 80002b8:	2100      	movs	r1, #0
 80002ba:	f002 fad9 	bl	8002870 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002be:	1d3b      	adds	r3, r7, #4
 80002c0:	0018      	movs	r0, r3
 80002c2:	2310      	movs	r3, #16
 80002c4:	001a      	movs	r2, r3
 80002c6:	2100      	movs	r1, #0
 80002c8:	f002 fad2 	bl	8002870 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002cc:	0021      	movs	r1, r4
 80002ce:	187b      	adds	r3, r7, r1
 80002d0:	2202      	movs	r2, #2
 80002d2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002d4:	187b      	adds	r3, r7, r1
 80002d6:	2201      	movs	r2, #1
 80002d8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002da:	187b      	adds	r3, r7, r1
 80002dc:	2210      	movs	r2, #16
 80002de:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002e0:	187b      	adds	r3, r7, r1
 80002e2:	2200      	movs	r2, #0
 80002e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002e6:	187b      	adds	r3, r7, r1
 80002e8:	0018      	movs	r0, r3
 80002ea:	f000 fd09 	bl	8000d00 <HAL_RCC_OscConfig>
 80002ee:	1e03      	subs	r3, r0, #0
 80002f0:	d001      	beq.n	80002f6 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 80002f2:	f000 f8a3 	bl	800043c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002f6:	1d3b      	adds	r3, r7, #4
 80002f8:	2207      	movs	r2, #7
 80002fa:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002fc:	1d3b      	adds	r3, r7, #4
 80002fe:	2200      	movs	r2, #0
 8000300:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000302:	1d3b      	adds	r3, r7, #4
 8000304:	2200      	movs	r2, #0
 8000306:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000308:	1d3b      	adds	r3, r7, #4
 800030a:	2200      	movs	r2, #0
 800030c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800030e:	1d3b      	adds	r3, r7, #4
 8000310:	2100      	movs	r1, #0
 8000312:	0018      	movs	r0, r3
 8000314:	f001 f87a 	bl	800140c <HAL_RCC_ClockConfig>
 8000318:	1e03      	subs	r3, r0, #0
 800031a:	d001      	beq.n	8000320 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800031c:	f000 f88e 	bl	800043c <Error_Handler>
  }
}
 8000320:	46c0      	nop			; (mov r8, r8)
 8000322:	46bd      	mov	sp, r7
 8000324:	b013      	add	sp, #76	; 0x4c
 8000326:	bd90      	pop	{r4, r7, pc}

08000328 <MX_USART4_UART_Init>:
  * @brief USART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART4_UART_Init(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 800032c:	4b15      	ldr	r3, [pc, #84]	; (8000384 <MX_USART4_UART_Init+0x5c>)
 800032e:	4a16      	ldr	r2, [pc, #88]	; (8000388 <MX_USART4_UART_Init+0x60>)
 8000330:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000332:	4b14      	ldr	r3, [pc, #80]	; (8000384 <MX_USART4_UART_Init+0x5c>)
 8000334:	22e1      	movs	r2, #225	; 0xe1
 8000336:	0252      	lsls	r2, r2, #9
 8000338:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800033a:	4b12      	ldr	r3, [pc, #72]	; (8000384 <MX_USART4_UART_Init+0x5c>)
 800033c:	2200      	movs	r2, #0
 800033e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000340:	4b10      	ldr	r3, [pc, #64]	; (8000384 <MX_USART4_UART_Init+0x5c>)
 8000342:	2200      	movs	r2, #0
 8000344:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_EVEN;
 8000346:	4b0f      	ldr	r3, [pc, #60]	; (8000384 <MX_USART4_UART_Init+0x5c>)
 8000348:	2280      	movs	r2, #128	; 0x80
 800034a:	00d2      	lsls	r2, r2, #3
 800034c:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800034e:	4b0d      	ldr	r3, [pc, #52]	; (8000384 <MX_USART4_UART_Init+0x5c>)
 8000350:	220c      	movs	r2, #12
 8000352:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000354:	4b0b      	ldr	r3, [pc, #44]	; (8000384 <MX_USART4_UART_Init+0x5c>)
 8000356:	2200      	movs	r2, #0
 8000358:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800035a:	4b0a      	ldr	r3, [pc, #40]	; (8000384 <MX_USART4_UART_Init+0x5c>)
 800035c:	2200      	movs	r2, #0
 800035e:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000360:	4b08      	ldr	r3, [pc, #32]	; (8000384 <MX_USART4_UART_Init+0x5c>)
 8000362:	2200      	movs	r2, #0
 8000364:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000366:	4b07      	ldr	r3, [pc, #28]	; (8000384 <MX_USART4_UART_Init+0x5c>)
 8000368:	2200      	movs	r2, #0
 800036a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800036c:	4b05      	ldr	r3, [pc, #20]	; (8000384 <MX_USART4_UART_Init+0x5c>)
 800036e:	0018      	movs	r0, r3
 8000370:	f001 f9c4 	bl	80016fc <HAL_UART_Init>
 8000374:	1e03      	subs	r3, r0, #0
 8000376:	d001      	beq.n	800037c <MX_USART4_UART_Init+0x54>
  {
    Error_Handler();
 8000378:	f000 f860 	bl	800043c <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 800037c:	46c0      	nop			; (mov r8, r8)
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}
 8000382:	46c0      	nop			; (mov r8, r8)
 8000384:	20000060 	.word	0x20000060
 8000388:	40004c00 	.word	0x40004c00

0800038c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800038c:	b590      	push	{r4, r7, lr}
 800038e:	b089      	sub	sp, #36	; 0x24
 8000390:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000392:	240c      	movs	r4, #12
 8000394:	193b      	adds	r3, r7, r4
 8000396:	0018      	movs	r0, r3
 8000398:	2314      	movs	r3, #20
 800039a:	001a      	movs	r2, r3
 800039c:	2100      	movs	r1, #0
 800039e:	f002 fa67 	bl	8002870 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003a2:	4b24      	ldr	r3, [pc, #144]	; (8000434 <MX_GPIO_Init+0xa8>)
 80003a4:	695a      	ldr	r2, [r3, #20]
 80003a6:	4b23      	ldr	r3, [pc, #140]	; (8000434 <MX_GPIO_Init+0xa8>)
 80003a8:	2180      	movs	r1, #128	; 0x80
 80003aa:	0289      	lsls	r1, r1, #10
 80003ac:	430a      	orrs	r2, r1
 80003ae:	615a      	str	r2, [r3, #20]
 80003b0:	4b20      	ldr	r3, [pc, #128]	; (8000434 <MX_GPIO_Init+0xa8>)
 80003b2:	695a      	ldr	r2, [r3, #20]
 80003b4:	2380      	movs	r3, #128	; 0x80
 80003b6:	029b      	lsls	r3, r3, #10
 80003b8:	4013      	ands	r3, r2
 80003ba:	60bb      	str	r3, [r7, #8]
 80003bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003be:	4b1d      	ldr	r3, [pc, #116]	; (8000434 <MX_GPIO_Init+0xa8>)
 80003c0:	695a      	ldr	r2, [r3, #20]
 80003c2:	4b1c      	ldr	r3, [pc, #112]	; (8000434 <MX_GPIO_Init+0xa8>)
 80003c4:	2180      	movs	r1, #128	; 0x80
 80003c6:	02c9      	lsls	r1, r1, #11
 80003c8:	430a      	orrs	r2, r1
 80003ca:	615a      	str	r2, [r3, #20]
 80003cc:	4b19      	ldr	r3, [pc, #100]	; (8000434 <MX_GPIO_Init+0xa8>)
 80003ce:	695a      	ldr	r2, [r3, #20]
 80003d0:	2380      	movs	r3, #128	; 0x80
 80003d2:	02db      	lsls	r3, r3, #11
 80003d4:	4013      	ands	r3, r2
 80003d6:	607b      	str	r3, [r7, #4]
 80003d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80003da:	4b17      	ldr	r3, [pc, #92]	; (8000438 <MX_GPIO_Init+0xac>)
 80003dc:	2200      	movs	r2, #0
 80003de:	2104      	movs	r1, #4
 80003e0:	0018      	movs	r0, r3
 80003e2:	f000 fc54 	bl	8000c8e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 80003e6:	193b      	adds	r3, r7, r4
 80003e8:	2208      	movs	r2, #8
 80003ea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003ec:	193b      	adds	r3, r7, r4
 80003ee:	2200      	movs	r2, #0
 80003f0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f2:	193b      	adds	r3, r7, r4
 80003f4:	2200      	movs	r2, #0
 80003f6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 80003f8:	193a      	adds	r2, r7, r4
 80003fa:	2390      	movs	r3, #144	; 0x90
 80003fc:	05db      	lsls	r3, r3, #23
 80003fe:	0011      	movs	r1, r2
 8000400:	0018      	movs	r0, r3
 8000402:	f000 faaf 	bl	8000964 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000406:	0021      	movs	r1, r4
 8000408:	187b      	adds	r3, r7, r1
 800040a:	2204      	movs	r2, #4
 800040c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800040e:	187b      	adds	r3, r7, r1
 8000410:	2201      	movs	r2, #1
 8000412:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000414:	187b      	adds	r3, r7, r1
 8000416:	2200      	movs	r2, #0
 8000418:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800041a:	187b      	adds	r3, r7, r1
 800041c:	2200      	movs	r2, #0
 800041e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000420:	187b      	adds	r3, r7, r1
 8000422:	4a05      	ldr	r2, [pc, #20]	; (8000438 <MX_GPIO_Init+0xac>)
 8000424:	0019      	movs	r1, r3
 8000426:	0010      	movs	r0, r2
 8000428:	f000 fa9c 	bl	8000964 <HAL_GPIO_Init>

}
 800042c:	46c0      	nop			; (mov r8, r8)
 800042e:	46bd      	mov	sp, r7
 8000430:	b009      	add	sp, #36	; 0x24
 8000432:	bd90      	pop	{r4, r7, pc}
 8000434:	40021000 	.word	0x40021000
 8000438:	48000400 	.word	0x48000400

0800043c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000440:	46c0      	nop			; (mov r8, r8)
 8000442:	46bd      	mov	sp, r7
 8000444:	bd80      	pop	{r7, pc}
	...

08000448 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800044e:	4b0f      	ldr	r3, [pc, #60]	; (800048c <HAL_MspInit+0x44>)
 8000450:	699a      	ldr	r2, [r3, #24]
 8000452:	4b0e      	ldr	r3, [pc, #56]	; (800048c <HAL_MspInit+0x44>)
 8000454:	2101      	movs	r1, #1
 8000456:	430a      	orrs	r2, r1
 8000458:	619a      	str	r2, [r3, #24]
 800045a:	4b0c      	ldr	r3, [pc, #48]	; (800048c <HAL_MspInit+0x44>)
 800045c:	699b      	ldr	r3, [r3, #24]
 800045e:	2201      	movs	r2, #1
 8000460:	4013      	ands	r3, r2
 8000462:	607b      	str	r3, [r7, #4]
 8000464:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000466:	4b09      	ldr	r3, [pc, #36]	; (800048c <HAL_MspInit+0x44>)
 8000468:	69da      	ldr	r2, [r3, #28]
 800046a:	4b08      	ldr	r3, [pc, #32]	; (800048c <HAL_MspInit+0x44>)
 800046c:	2180      	movs	r1, #128	; 0x80
 800046e:	0549      	lsls	r1, r1, #21
 8000470:	430a      	orrs	r2, r1
 8000472:	61da      	str	r2, [r3, #28]
 8000474:	4b05      	ldr	r3, [pc, #20]	; (800048c <HAL_MspInit+0x44>)
 8000476:	69da      	ldr	r2, [r3, #28]
 8000478:	2380      	movs	r3, #128	; 0x80
 800047a:	055b      	lsls	r3, r3, #21
 800047c:	4013      	ands	r3, r2
 800047e:	603b      	str	r3, [r7, #0]
 8000480:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000482:	46c0      	nop			; (mov r8, r8)
 8000484:	46bd      	mov	sp, r7
 8000486:	b002      	add	sp, #8
 8000488:	bd80      	pop	{r7, pc}
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	40021000 	.word	0x40021000

08000490 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b08a      	sub	sp, #40	; 0x28
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000498:	2314      	movs	r3, #20
 800049a:	18fb      	adds	r3, r7, r3
 800049c:	0018      	movs	r0, r3
 800049e:	2314      	movs	r3, #20
 80004a0:	001a      	movs	r2, r3
 80004a2:	2100      	movs	r1, #0
 80004a4:	f002 f9e4 	bl	8002870 <memset>
  if(huart->Instance==USART4)
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	4a20      	ldr	r2, [pc, #128]	; (8000530 <HAL_UART_MspInit+0xa0>)
 80004ae:	4293      	cmp	r3, r2
 80004b0:	d13a      	bne.n	8000528 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART4_MspInit 0 */

  /* USER CODE END USART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART4_CLK_ENABLE();
 80004b2:	4b20      	ldr	r3, [pc, #128]	; (8000534 <HAL_UART_MspInit+0xa4>)
 80004b4:	69da      	ldr	r2, [r3, #28]
 80004b6:	4b1f      	ldr	r3, [pc, #124]	; (8000534 <HAL_UART_MspInit+0xa4>)
 80004b8:	2180      	movs	r1, #128	; 0x80
 80004ba:	0309      	lsls	r1, r1, #12
 80004bc:	430a      	orrs	r2, r1
 80004be:	61da      	str	r2, [r3, #28]
 80004c0:	4b1c      	ldr	r3, [pc, #112]	; (8000534 <HAL_UART_MspInit+0xa4>)
 80004c2:	69da      	ldr	r2, [r3, #28]
 80004c4:	2380      	movs	r3, #128	; 0x80
 80004c6:	031b      	lsls	r3, r3, #12
 80004c8:	4013      	ands	r3, r2
 80004ca:	613b      	str	r3, [r7, #16]
 80004cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ce:	4b19      	ldr	r3, [pc, #100]	; (8000534 <HAL_UART_MspInit+0xa4>)
 80004d0:	695a      	ldr	r2, [r3, #20]
 80004d2:	4b18      	ldr	r3, [pc, #96]	; (8000534 <HAL_UART_MspInit+0xa4>)
 80004d4:	2180      	movs	r1, #128	; 0x80
 80004d6:	0289      	lsls	r1, r1, #10
 80004d8:	430a      	orrs	r2, r1
 80004da:	615a      	str	r2, [r3, #20]
 80004dc:	4b15      	ldr	r3, [pc, #84]	; (8000534 <HAL_UART_MspInit+0xa4>)
 80004de:	695a      	ldr	r2, [r3, #20]
 80004e0:	2380      	movs	r3, #128	; 0x80
 80004e2:	029b      	lsls	r3, r3, #10
 80004e4:	4013      	ands	r3, r2
 80004e6:	60fb      	str	r3, [r7, #12]
 80004e8:	68fb      	ldr	r3, [r7, #12]
    /**USART4 GPIO Configuration
    PA0     ------> USART4_TX
    PA1     ------> USART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80004ea:	2114      	movs	r1, #20
 80004ec:	187b      	adds	r3, r7, r1
 80004ee:	2203      	movs	r2, #3
 80004f0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004f2:	187b      	adds	r3, r7, r1
 80004f4:	2202      	movs	r2, #2
 80004f6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f8:	187b      	adds	r3, r7, r1
 80004fa:	2200      	movs	r2, #0
 80004fc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004fe:	187b      	adds	r3, r7, r1
 8000500:	2203      	movs	r2, #3
 8000502:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART4;
 8000504:	187b      	adds	r3, r7, r1
 8000506:	2204      	movs	r2, #4
 8000508:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800050a:	187a      	adds	r2, r7, r1
 800050c:	2390      	movs	r3, #144	; 0x90
 800050e:	05db      	lsls	r3, r3, #23
 8000510:	0011      	movs	r1, r2
 8000512:	0018      	movs	r0, r3
 8000514:	f000 fa26 	bl	8000964 <HAL_GPIO_Init>

    /* USART4 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 8000518:	2200      	movs	r2, #0
 800051a:	2100      	movs	r1, #0
 800051c:	201d      	movs	r0, #29
 800051e:	f000 f971 	bl	8000804 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8000522:	201d      	movs	r0, #29
 8000524:	f000 f983 	bl	800082e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }

}
 8000528:	46c0      	nop			; (mov r8, r8)
 800052a:	46bd      	mov	sp, r7
 800052c:	b00a      	add	sp, #40	; 0x28
 800052e:	bd80      	pop	{r7, pc}
 8000530:	40004c00 	.word	0x40004c00
 8000534:	40021000 	.word	0x40021000

08000538 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800053c:	46c0      	nop			; (mov r8, r8)
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}

08000542 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000542:	b580      	push	{r7, lr}
 8000544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000546:	e7fe      	b.n	8000546 <HardFault_Handler+0x4>

08000548 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800054c:	46c0      	nop			; (mov r8, r8)
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}

08000552 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000552:	b580      	push	{r7, lr}
 8000554:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000556:	46c0      	nop			; (mov r8, r8)
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}

0800055c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000560:	f000 f888 	bl	8000674 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000564:	46c0      	nop			; (mov r8, r8)
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
	...

0800056c <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 global interrupts.
  */
void USART3_4_IRQHandler(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000570:	4b03      	ldr	r3, [pc, #12]	; (8000580 <USART3_4_IRQHandler+0x14>)
 8000572:	0018      	movs	r0, r3
 8000574:	f001 f9d4 	bl	8001920 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 8000578:	46c0      	nop			; (mov r8, r8)
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
 800057e:	46c0      	nop			; (mov r8, r8)
 8000580:	20000060 	.word	0x20000060

08000584 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000588:	46c0      	nop			; (mov r8, r8)
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
	...

08000590 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000590:	480d      	ldr	r0, [pc, #52]	; (80005c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000592:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000594:	480d      	ldr	r0, [pc, #52]	; (80005cc <LoopForever+0x6>)
  ldr r1, =_edata
 8000596:	490e      	ldr	r1, [pc, #56]	; (80005d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000598:	4a0e      	ldr	r2, [pc, #56]	; (80005d4 <LoopForever+0xe>)
  movs r3, #0
 800059a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800059c:	e002      	b.n	80005a4 <LoopCopyDataInit>

0800059e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800059e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005a2:	3304      	adds	r3, #4

080005a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005a8:	d3f9      	bcc.n	800059e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005aa:	4a0b      	ldr	r2, [pc, #44]	; (80005d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005ac:	4c0b      	ldr	r4, [pc, #44]	; (80005dc <LoopForever+0x16>)
  movs r3, #0
 80005ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005b0:	e001      	b.n	80005b6 <LoopFillZerobss>

080005b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005b4:	3204      	adds	r2, #4

080005b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005b8:	d3fb      	bcc.n	80005b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80005ba:	f7ff ffe3 	bl	8000584 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80005be:	f002 f933 	bl	8002828 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005c2:	f7ff fe2d 	bl	8000220 <main>

080005c6 <LoopForever>:

LoopForever:
    b LoopForever
 80005c6:	e7fe      	b.n	80005c6 <LoopForever>
  ldr   r0, =_estack
 80005c8:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80005cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005d0:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 80005d4:	080028d8 	.word	0x080028d8
  ldr r2, =_sbss
 80005d8:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 80005dc:	200000ec 	.word	0x200000ec

080005e0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005e0:	e7fe      	b.n	80005e0 <ADC1_COMP_IRQHandler>
	...

080005e4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005e8:	4b07      	ldr	r3, [pc, #28]	; (8000608 <HAL_Init+0x24>)
 80005ea:	681a      	ldr	r2, [r3, #0]
 80005ec:	4b06      	ldr	r3, [pc, #24]	; (8000608 <HAL_Init+0x24>)
 80005ee:	2110      	movs	r1, #16
 80005f0:	430a      	orrs	r2, r1
 80005f2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80005f4:	2000      	movs	r0, #0
 80005f6:	f000 f809 	bl	800060c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005fa:	f7ff ff25 	bl	8000448 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005fe:	2300      	movs	r3, #0
}
 8000600:	0018      	movs	r0, r3
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	46c0      	nop			; (mov r8, r8)
 8000608:	40022000 	.word	0x40022000

0800060c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800060c:	b590      	push	{r4, r7, lr}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000614:	4b14      	ldr	r3, [pc, #80]	; (8000668 <HAL_InitTick+0x5c>)
 8000616:	681c      	ldr	r4, [r3, #0]
 8000618:	4b14      	ldr	r3, [pc, #80]	; (800066c <HAL_InitTick+0x60>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	0019      	movs	r1, r3
 800061e:	23fa      	movs	r3, #250	; 0xfa
 8000620:	0098      	lsls	r0, r3, #2
 8000622:	f7ff fd71 	bl	8000108 <__udivsi3>
 8000626:	0003      	movs	r3, r0
 8000628:	0019      	movs	r1, r3
 800062a:	0020      	movs	r0, r4
 800062c:	f7ff fd6c 	bl	8000108 <__udivsi3>
 8000630:	0003      	movs	r3, r0
 8000632:	0018      	movs	r0, r3
 8000634:	f000 f90b 	bl	800084e <HAL_SYSTICK_Config>
 8000638:	1e03      	subs	r3, r0, #0
 800063a:	d001      	beq.n	8000640 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800063c:	2301      	movs	r3, #1
 800063e:	e00f      	b.n	8000660 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	2b03      	cmp	r3, #3
 8000644:	d80b      	bhi.n	800065e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000646:	6879      	ldr	r1, [r7, #4]
 8000648:	2301      	movs	r3, #1
 800064a:	425b      	negs	r3, r3
 800064c:	2200      	movs	r2, #0
 800064e:	0018      	movs	r0, r3
 8000650:	f000 f8d8 	bl	8000804 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000654:	4b06      	ldr	r3, [pc, #24]	; (8000670 <HAL_InitTick+0x64>)
 8000656:	687a      	ldr	r2, [r7, #4]
 8000658:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800065a:	2300      	movs	r3, #0
 800065c:	e000      	b.n	8000660 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800065e:	2301      	movs	r3, #1
}
 8000660:	0018      	movs	r0, r3
 8000662:	46bd      	mov	sp, r7
 8000664:	b003      	add	sp, #12
 8000666:	bd90      	pop	{r4, r7, pc}
 8000668:	20000030 	.word	0x20000030
 800066c:	20000038 	.word	0x20000038
 8000670:	20000034 	.word	0x20000034

08000674 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000678:	4b05      	ldr	r3, [pc, #20]	; (8000690 <HAL_IncTick+0x1c>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	001a      	movs	r2, r3
 800067e:	4b05      	ldr	r3, [pc, #20]	; (8000694 <HAL_IncTick+0x20>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	18d2      	adds	r2, r2, r3
 8000684:	4b03      	ldr	r3, [pc, #12]	; (8000694 <HAL_IncTick+0x20>)
 8000686:	601a      	str	r2, [r3, #0]
}
 8000688:	46c0      	nop			; (mov r8, r8)
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	46c0      	nop			; (mov r8, r8)
 8000690:	20000038 	.word	0x20000038
 8000694:	200000e8 	.word	0x200000e8

08000698 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  return uwTick;
 800069c:	4b02      	ldr	r3, [pc, #8]	; (80006a8 <HAL_GetTick+0x10>)
 800069e:	681b      	ldr	r3, [r3, #0]
}
 80006a0:	0018      	movs	r0, r3
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	46c0      	nop			; (mov r8, r8)
 80006a8:	200000e8 	.word	0x200000e8

080006ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	0002      	movs	r2, r0
 80006b4:	1dfb      	adds	r3, r7, #7
 80006b6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80006b8:	1dfb      	adds	r3, r7, #7
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	2b7f      	cmp	r3, #127	; 0x7f
 80006be:	d809      	bhi.n	80006d4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006c0:	1dfb      	adds	r3, r7, #7
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	001a      	movs	r2, r3
 80006c6:	231f      	movs	r3, #31
 80006c8:	401a      	ands	r2, r3
 80006ca:	4b04      	ldr	r3, [pc, #16]	; (80006dc <__NVIC_EnableIRQ+0x30>)
 80006cc:	2101      	movs	r1, #1
 80006ce:	4091      	lsls	r1, r2
 80006d0:	000a      	movs	r2, r1
 80006d2:	601a      	str	r2, [r3, #0]
  }
}
 80006d4:	46c0      	nop			; (mov r8, r8)
 80006d6:	46bd      	mov	sp, r7
 80006d8:	b002      	add	sp, #8
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	e000e100 	.word	0xe000e100

080006e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006e0:	b590      	push	{r4, r7, lr}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	0002      	movs	r2, r0
 80006e8:	6039      	str	r1, [r7, #0]
 80006ea:	1dfb      	adds	r3, r7, #7
 80006ec:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80006ee:	1dfb      	adds	r3, r7, #7
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	2b7f      	cmp	r3, #127	; 0x7f
 80006f4:	d828      	bhi.n	8000748 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006f6:	4a2f      	ldr	r2, [pc, #188]	; (80007b4 <__NVIC_SetPriority+0xd4>)
 80006f8:	1dfb      	adds	r3, r7, #7
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	b25b      	sxtb	r3, r3
 80006fe:	089b      	lsrs	r3, r3, #2
 8000700:	33c0      	adds	r3, #192	; 0xc0
 8000702:	009b      	lsls	r3, r3, #2
 8000704:	589b      	ldr	r3, [r3, r2]
 8000706:	1dfa      	adds	r2, r7, #7
 8000708:	7812      	ldrb	r2, [r2, #0]
 800070a:	0011      	movs	r1, r2
 800070c:	2203      	movs	r2, #3
 800070e:	400a      	ands	r2, r1
 8000710:	00d2      	lsls	r2, r2, #3
 8000712:	21ff      	movs	r1, #255	; 0xff
 8000714:	4091      	lsls	r1, r2
 8000716:	000a      	movs	r2, r1
 8000718:	43d2      	mvns	r2, r2
 800071a:	401a      	ands	r2, r3
 800071c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	019b      	lsls	r3, r3, #6
 8000722:	22ff      	movs	r2, #255	; 0xff
 8000724:	401a      	ands	r2, r3
 8000726:	1dfb      	adds	r3, r7, #7
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	0018      	movs	r0, r3
 800072c:	2303      	movs	r3, #3
 800072e:	4003      	ands	r3, r0
 8000730:	00db      	lsls	r3, r3, #3
 8000732:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000734:	481f      	ldr	r0, [pc, #124]	; (80007b4 <__NVIC_SetPriority+0xd4>)
 8000736:	1dfb      	adds	r3, r7, #7
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	b25b      	sxtb	r3, r3
 800073c:	089b      	lsrs	r3, r3, #2
 800073e:	430a      	orrs	r2, r1
 8000740:	33c0      	adds	r3, #192	; 0xc0
 8000742:	009b      	lsls	r3, r3, #2
 8000744:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000746:	e031      	b.n	80007ac <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000748:	4a1b      	ldr	r2, [pc, #108]	; (80007b8 <__NVIC_SetPriority+0xd8>)
 800074a:	1dfb      	adds	r3, r7, #7
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	0019      	movs	r1, r3
 8000750:	230f      	movs	r3, #15
 8000752:	400b      	ands	r3, r1
 8000754:	3b08      	subs	r3, #8
 8000756:	089b      	lsrs	r3, r3, #2
 8000758:	3306      	adds	r3, #6
 800075a:	009b      	lsls	r3, r3, #2
 800075c:	18d3      	adds	r3, r2, r3
 800075e:	3304      	adds	r3, #4
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	1dfa      	adds	r2, r7, #7
 8000764:	7812      	ldrb	r2, [r2, #0]
 8000766:	0011      	movs	r1, r2
 8000768:	2203      	movs	r2, #3
 800076a:	400a      	ands	r2, r1
 800076c:	00d2      	lsls	r2, r2, #3
 800076e:	21ff      	movs	r1, #255	; 0xff
 8000770:	4091      	lsls	r1, r2
 8000772:	000a      	movs	r2, r1
 8000774:	43d2      	mvns	r2, r2
 8000776:	401a      	ands	r2, r3
 8000778:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	019b      	lsls	r3, r3, #6
 800077e:	22ff      	movs	r2, #255	; 0xff
 8000780:	401a      	ands	r2, r3
 8000782:	1dfb      	adds	r3, r7, #7
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	0018      	movs	r0, r3
 8000788:	2303      	movs	r3, #3
 800078a:	4003      	ands	r3, r0
 800078c:	00db      	lsls	r3, r3, #3
 800078e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000790:	4809      	ldr	r0, [pc, #36]	; (80007b8 <__NVIC_SetPriority+0xd8>)
 8000792:	1dfb      	adds	r3, r7, #7
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	001c      	movs	r4, r3
 8000798:	230f      	movs	r3, #15
 800079a:	4023      	ands	r3, r4
 800079c:	3b08      	subs	r3, #8
 800079e:	089b      	lsrs	r3, r3, #2
 80007a0:	430a      	orrs	r2, r1
 80007a2:	3306      	adds	r3, #6
 80007a4:	009b      	lsls	r3, r3, #2
 80007a6:	18c3      	adds	r3, r0, r3
 80007a8:	3304      	adds	r3, #4
 80007aa:	601a      	str	r2, [r3, #0]
}
 80007ac:	46c0      	nop			; (mov r8, r8)
 80007ae:	46bd      	mov	sp, r7
 80007b0:	b003      	add	sp, #12
 80007b2:	bd90      	pop	{r4, r7, pc}
 80007b4:	e000e100 	.word	0xe000e100
 80007b8:	e000ed00 	.word	0xe000ed00

080007bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	3b01      	subs	r3, #1
 80007c8:	4a0c      	ldr	r2, [pc, #48]	; (80007fc <SysTick_Config+0x40>)
 80007ca:	4293      	cmp	r3, r2
 80007cc:	d901      	bls.n	80007d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007ce:	2301      	movs	r3, #1
 80007d0:	e010      	b.n	80007f4 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007d2:	4b0b      	ldr	r3, [pc, #44]	; (8000800 <SysTick_Config+0x44>)
 80007d4:	687a      	ldr	r2, [r7, #4]
 80007d6:	3a01      	subs	r2, #1
 80007d8:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007da:	2301      	movs	r3, #1
 80007dc:	425b      	negs	r3, r3
 80007de:	2103      	movs	r1, #3
 80007e0:	0018      	movs	r0, r3
 80007e2:	f7ff ff7d 	bl	80006e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007e6:	4b06      	ldr	r3, [pc, #24]	; (8000800 <SysTick_Config+0x44>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007ec:	4b04      	ldr	r3, [pc, #16]	; (8000800 <SysTick_Config+0x44>)
 80007ee:	2207      	movs	r2, #7
 80007f0:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007f2:	2300      	movs	r3, #0
}
 80007f4:	0018      	movs	r0, r3
 80007f6:	46bd      	mov	sp, r7
 80007f8:	b002      	add	sp, #8
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	00ffffff 	.word	0x00ffffff
 8000800:	e000e010 	.word	0xe000e010

08000804 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0
 800080a:	60b9      	str	r1, [r7, #8]
 800080c:	607a      	str	r2, [r7, #4]
 800080e:	210f      	movs	r1, #15
 8000810:	187b      	adds	r3, r7, r1
 8000812:	1c02      	adds	r2, r0, #0
 8000814:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000816:	68ba      	ldr	r2, [r7, #8]
 8000818:	187b      	adds	r3, r7, r1
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	b25b      	sxtb	r3, r3
 800081e:	0011      	movs	r1, r2
 8000820:	0018      	movs	r0, r3
 8000822:	f7ff ff5d 	bl	80006e0 <__NVIC_SetPriority>
}
 8000826:	46c0      	nop			; (mov r8, r8)
 8000828:	46bd      	mov	sp, r7
 800082a:	b004      	add	sp, #16
 800082c:	bd80      	pop	{r7, pc}

0800082e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800082e:	b580      	push	{r7, lr}
 8000830:	b082      	sub	sp, #8
 8000832:	af00      	add	r7, sp, #0
 8000834:	0002      	movs	r2, r0
 8000836:	1dfb      	adds	r3, r7, #7
 8000838:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800083a:	1dfb      	adds	r3, r7, #7
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	b25b      	sxtb	r3, r3
 8000840:	0018      	movs	r0, r3
 8000842:	f7ff ff33 	bl	80006ac <__NVIC_EnableIRQ>
}
 8000846:	46c0      	nop			; (mov r8, r8)
 8000848:	46bd      	mov	sp, r7
 800084a:	b002      	add	sp, #8
 800084c:	bd80      	pop	{r7, pc}

0800084e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800084e:	b580      	push	{r7, lr}
 8000850:	b082      	sub	sp, #8
 8000852:	af00      	add	r7, sp, #0
 8000854:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	0018      	movs	r0, r3
 800085a:	f7ff ffaf 	bl	80007bc <SysTick_Config>
 800085e:	0003      	movs	r3, r0
}
 8000860:	0018      	movs	r0, r3
 8000862:	46bd      	mov	sp, r7
 8000864:	b002      	add	sp, #8
 8000866:	bd80      	pop	{r7, pc}

08000868 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	2221      	movs	r2, #33	; 0x21
 8000874:	5c9b      	ldrb	r3, [r3, r2]
 8000876:	b2db      	uxtb	r3, r3
 8000878:	2b02      	cmp	r3, #2
 800087a:	d008      	beq.n	800088e <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	2204      	movs	r2, #4
 8000880:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	2220      	movs	r2, #32
 8000886:	2100      	movs	r1, #0
 8000888:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 800088a:	2301      	movs	r3, #1
 800088c:	e020      	b.n	80008d0 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	681a      	ldr	r2, [r3, #0]
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	210e      	movs	r1, #14
 800089a:	438a      	bics	r2, r1
 800089c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	681a      	ldr	r2, [r3, #0]
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	2101      	movs	r1, #1
 80008aa:	438a      	bics	r2, r1
 80008ac:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80008b6:	2101      	movs	r1, #1
 80008b8:	4091      	lsls	r1, r2
 80008ba:	000a      	movs	r2, r1
 80008bc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	2221      	movs	r2, #33	; 0x21
 80008c2:	2101      	movs	r1, #1
 80008c4:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	2220      	movs	r2, #32
 80008ca:	2100      	movs	r1, #0
 80008cc:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80008ce:	2300      	movs	r3, #0
}
 80008d0:	0018      	movs	r0, r3
 80008d2:	46bd      	mov	sp, r7
 80008d4:	b002      	add	sp, #8
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80008d8:	b580      	push	{r7, lr}
 80008da:	b084      	sub	sp, #16
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80008e0:	230f      	movs	r3, #15
 80008e2:	18fb      	adds	r3, r7, r3
 80008e4:	2200      	movs	r2, #0
 80008e6:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	2221      	movs	r2, #33	; 0x21
 80008ec:	5c9b      	ldrb	r3, [r3, r2]
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	2b02      	cmp	r3, #2
 80008f2:	d007      	beq.n	8000904 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	2204      	movs	r2, #4
 80008f8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80008fa:	230f      	movs	r3, #15
 80008fc:	18fb      	adds	r3, r7, r3
 80008fe:	2201      	movs	r2, #1
 8000900:	701a      	strb	r2, [r3, #0]
 8000902:	e028      	b.n	8000956 <HAL_DMA_Abort_IT+0x7e>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	681a      	ldr	r2, [r3, #0]
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	210e      	movs	r1, #14
 8000910:	438a      	bics	r2, r1
 8000912:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	681a      	ldr	r2, [r3, #0]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	2101      	movs	r1, #1
 8000920:	438a      	bics	r2, r1
 8000922:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800092c:	2101      	movs	r1, #1
 800092e:	4091      	lsls	r1, r2
 8000930:	000a      	movs	r2, r1
 8000932:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	2221      	movs	r2, #33	; 0x21
 8000938:	2101      	movs	r1, #1
 800093a:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	2220      	movs	r2, #32
 8000940:	2100      	movs	r1, #0
 8000942:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000948:	2b00      	cmp	r3, #0
 800094a:	d004      	beq.n	8000956 <HAL_DMA_Abort_IT+0x7e>
    {
      hdma->XferAbortCallback(hdma);
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000950:	687a      	ldr	r2, [r7, #4]
 8000952:	0010      	movs	r0, r2
 8000954:	4798      	blx	r3
    } 
  }
  return status;
 8000956:	230f      	movs	r3, #15
 8000958:	18fb      	adds	r3, r7, r3
 800095a:	781b      	ldrb	r3, [r3, #0]
}
 800095c:	0018      	movs	r0, r3
 800095e:	46bd      	mov	sp, r7
 8000960:	b004      	add	sp, #16
 8000962:	bd80      	pop	{r7, pc}

08000964 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000964:	b580      	push	{r7, lr}
 8000966:	b086      	sub	sp, #24
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
 800096c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800096e:	2300      	movs	r3, #0
 8000970:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000972:	e155      	b.n	8000c20 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	2101      	movs	r1, #1
 800097a:	697a      	ldr	r2, [r7, #20]
 800097c:	4091      	lsls	r1, r2
 800097e:	000a      	movs	r2, r1
 8000980:	4013      	ands	r3, r2
 8000982:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d100      	bne.n	800098c <HAL_GPIO_Init+0x28>
 800098a:	e146      	b.n	8000c1a <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	685b      	ldr	r3, [r3, #4]
 8000990:	2b01      	cmp	r3, #1
 8000992:	d00b      	beq.n	80009ac <HAL_GPIO_Init+0x48>
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	685b      	ldr	r3, [r3, #4]
 8000998:	2b02      	cmp	r3, #2
 800099a:	d007      	beq.n	80009ac <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009a0:	2b11      	cmp	r3, #17
 80009a2:	d003      	beq.n	80009ac <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	685b      	ldr	r3, [r3, #4]
 80009a8:	2b12      	cmp	r3, #18
 80009aa:	d130      	bne.n	8000a0e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	689b      	ldr	r3, [r3, #8]
 80009b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80009b2:	697b      	ldr	r3, [r7, #20]
 80009b4:	005b      	lsls	r3, r3, #1
 80009b6:	2203      	movs	r2, #3
 80009b8:	409a      	lsls	r2, r3
 80009ba:	0013      	movs	r3, r2
 80009bc:	43da      	mvns	r2, r3
 80009be:	693b      	ldr	r3, [r7, #16]
 80009c0:	4013      	ands	r3, r2
 80009c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	68da      	ldr	r2, [r3, #12]
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	005b      	lsls	r3, r3, #1
 80009cc:	409a      	lsls	r2, r3
 80009ce:	0013      	movs	r3, r2
 80009d0:	693a      	ldr	r2, [r7, #16]
 80009d2:	4313      	orrs	r3, r2
 80009d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	693a      	ldr	r2, [r7, #16]
 80009da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009e2:	2201      	movs	r2, #1
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	409a      	lsls	r2, r3
 80009e8:	0013      	movs	r3, r2
 80009ea:	43da      	mvns	r2, r3
 80009ec:	693b      	ldr	r3, [r7, #16]
 80009ee:	4013      	ands	r3, r2
 80009f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	685b      	ldr	r3, [r3, #4]
 80009f6:	091b      	lsrs	r3, r3, #4
 80009f8:	2201      	movs	r2, #1
 80009fa:	401a      	ands	r2, r3
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	409a      	lsls	r2, r3
 8000a00:	0013      	movs	r3, r2
 8000a02:	693a      	ldr	r2, [r7, #16]
 8000a04:	4313      	orrs	r3, r2
 8000a06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	693a      	ldr	r2, [r7, #16]
 8000a0c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	68db      	ldr	r3, [r3, #12]
 8000a12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	005b      	lsls	r3, r3, #1
 8000a18:	2203      	movs	r2, #3
 8000a1a:	409a      	lsls	r2, r3
 8000a1c:	0013      	movs	r3, r2
 8000a1e:	43da      	mvns	r2, r3
 8000a20:	693b      	ldr	r3, [r7, #16]
 8000a22:	4013      	ands	r3, r2
 8000a24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	689a      	ldr	r2, [r3, #8]
 8000a2a:	697b      	ldr	r3, [r7, #20]
 8000a2c:	005b      	lsls	r3, r3, #1
 8000a2e:	409a      	lsls	r2, r3
 8000a30:	0013      	movs	r3, r2
 8000a32:	693a      	ldr	r2, [r7, #16]
 8000a34:	4313      	orrs	r3, r2
 8000a36:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	693a      	ldr	r2, [r7, #16]
 8000a3c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	2b02      	cmp	r3, #2
 8000a44:	d003      	beq.n	8000a4e <HAL_GPIO_Init+0xea>
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	685b      	ldr	r3, [r3, #4]
 8000a4a:	2b12      	cmp	r3, #18
 8000a4c:	d123      	bne.n	8000a96 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a4e:	697b      	ldr	r3, [r7, #20]
 8000a50:	08da      	lsrs	r2, r3, #3
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	3208      	adds	r2, #8
 8000a56:	0092      	lsls	r2, r2, #2
 8000a58:	58d3      	ldr	r3, [r2, r3]
 8000a5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	2207      	movs	r2, #7
 8000a60:	4013      	ands	r3, r2
 8000a62:	009b      	lsls	r3, r3, #2
 8000a64:	220f      	movs	r2, #15
 8000a66:	409a      	lsls	r2, r3
 8000a68:	0013      	movs	r3, r2
 8000a6a:	43da      	mvns	r2, r3
 8000a6c:	693b      	ldr	r3, [r7, #16]
 8000a6e:	4013      	ands	r3, r2
 8000a70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	691a      	ldr	r2, [r3, #16]
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	2107      	movs	r1, #7
 8000a7a:	400b      	ands	r3, r1
 8000a7c:	009b      	lsls	r3, r3, #2
 8000a7e:	409a      	lsls	r2, r3
 8000a80:	0013      	movs	r3, r2
 8000a82:	693a      	ldr	r2, [r7, #16]
 8000a84:	4313      	orrs	r3, r2
 8000a86:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	08da      	lsrs	r2, r3, #3
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	3208      	adds	r2, #8
 8000a90:	0092      	lsls	r2, r2, #2
 8000a92:	6939      	ldr	r1, [r7, #16]
 8000a94:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	005b      	lsls	r3, r3, #1
 8000aa0:	2203      	movs	r2, #3
 8000aa2:	409a      	lsls	r2, r3
 8000aa4:	0013      	movs	r3, r2
 8000aa6:	43da      	mvns	r2, r3
 8000aa8:	693b      	ldr	r3, [r7, #16]
 8000aaa:	4013      	ands	r3, r2
 8000aac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	2203      	movs	r2, #3
 8000ab4:	401a      	ands	r2, r3
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	005b      	lsls	r3, r3, #1
 8000aba:	409a      	lsls	r2, r3
 8000abc:	0013      	movs	r3, r2
 8000abe:	693a      	ldr	r2, [r7, #16]
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	693a      	ldr	r2, [r7, #16]
 8000ac8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	685a      	ldr	r2, [r3, #4]
 8000ace:	2380      	movs	r3, #128	; 0x80
 8000ad0:	055b      	lsls	r3, r3, #21
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	d100      	bne.n	8000ad8 <HAL_GPIO_Init+0x174>
 8000ad6:	e0a0      	b.n	8000c1a <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad8:	4b57      	ldr	r3, [pc, #348]	; (8000c38 <HAL_GPIO_Init+0x2d4>)
 8000ada:	699a      	ldr	r2, [r3, #24]
 8000adc:	4b56      	ldr	r3, [pc, #344]	; (8000c38 <HAL_GPIO_Init+0x2d4>)
 8000ade:	2101      	movs	r1, #1
 8000ae0:	430a      	orrs	r2, r1
 8000ae2:	619a      	str	r2, [r3, #24]
 8000ae4:	4b54      	ldr	r3, [pc, #336]	; (8000c38 <HAL_GPIO_Init+0x2d4>)
 8000ae6:	699b      	ldr	r3, [r3, #24]
 8000ae8:	2201      	movs	r2, #1
 8000aea:	4013      	ands	r3, r2
 8000aec:	60bb      	str	r3, [r7, #8]
 8000aee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000af0:	4a52      	ldr	r2, [pc, #328]	; (8000c3c <HAL_GPIO_Init+0x2d8>)
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	089b      	lsrs	r3, r3, #2
 8000af6:	3302      	adds	r3, #2
 8000af8:	009b      	lsls	r3, r3, #2
 8000afa:	589b      	ldr	r3, [r3, r2]
 8000afc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	2203      	movs	r2, #3
 8000b02:	4013      	ands	r3, r2
 8000b04:	009b      	lsls	r3, r3, #2
 8000b06:	220f      	movs	r2, #15
 8000b08:	409a      	lsls	r2, r3
 8000b0a:	0013      	movs	r3, r2
 8000b0c:	43da      	mvns	r2, r3
 8000b0e:	693b      	ldr	r3, [r7, #16]
 8000b10:	4013      	ands	r3, r2
 8000b12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b14:	687a      	ldr	r2, [r7, #4]
 8000b16:	2390      	movs	r3, #144	; 0x90
 8000b18:	05db      	lsls	r3, r3, #23
 8000b1a:	429a      	cmp	r2, r3
 8000b1c:	d019      	beq.n	8000b52 <HAL_GPIO_Init+0x1ee>
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	4a47      	ldr	r2, [pc, #284]	; (8000c40 <HAL_GPIO_Init+0x2dc>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d013      	beq.n	8000b4e <HAL_GPIO_Init+0x1ea>
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	4a46      	ldr	r2, [pc, #280]	; (8000c44 <HAL_GPIO_Init+0x2e0>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d00d      	beq.n	8000b4a <HAL_GPIO_Init+0x1e6>
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	4a45      	ldr	r2, [pc, #276]	; (8000c48 <HAL_GPIO_Init+0x2e4>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d007      	beq.n	8000b46 <HAL_GPIO_Init+0x1e2>
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4a44      	ldr	r2, [pc, #272]	; (8000c4c <HAL_GPIO_Init+0x2e8>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d101      	bne.n	8000b42 <HAL_GPIO_Init+0x1de>
 8000b3e:	2304      	movs	r3, #4
 8000b40:	e008      	b.n	8000b54 <HAL_GPIO_Init+0x1f0>
 8000b42:	2305      	movs	r3, #5
 8000b44:	e006      	b.n	8000b54 <HAL_GPIO_Init+0x1f0>
 8000b46:	2303      	movs	r3, #3
 8000b48:	e004      	b.n	8000b54 <HAL_GPIO_Init+0x1f0>
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	e002      	b.n	8000b54 <HAL_GPIO_Init+0x1f0>
 8000b4e:	2301      	movs	r3, #1
 8000b50:	e000      	b.n	8000b54 <HAL_GPIO_Init+0x1f0>
 8000b52:	2300      	movs	r3, #0
 8000b54:	697a      	ldr	r2, [r7, #20]
 8000b56:	2103      	movs	r1, #3
 8000b58:	400a      	ands	r2, r1
 8000b5a:	0092      	lsls	r2, r2, #2
 8000b5c:	4093      	lsls	r3, r2
 8000b5e:	693a      	ldr	r2, [r7, #16]
 8000b60:	4313      	orrs	r3, r2
 8000b62:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b64:	4935      	ldr	r1, [pc, #212]	; (8000c3c <HAL_GPIO_Init+0x2d8>)
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	089b      	lsrs	r3, r3, #2
 8000b6a:	3302      	adds	r3, #2
 8000b6c:	009b      	lsls	r3, r3, #2
 8000b6e:	693a      	ldr	r2, [r7, #16]
 8000b70:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b72:	4b37      	ldr	r3, [pc, #220]	; (8000c50 <HAL_GPIO_Init+0x2ec>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	43da      	mvns	r2, r3
 8000b7c:	693b      	ldr	r3, [r7, #16]
 8000b7e:	4013      	ands	r3, r2
 8000b80:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	685a      	ldr	r2, [r3, #4]
 8000b86:	2380      	movs	r3, #128	; 0x80
 8000b88:	025b      	lsls	r3, r3, #9
 8000b8a:	4013      	ands	r3, r2
 8000b8c:	d003      	beq.n	8000b96 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	4313      	orrs	r3, r2
 8000b94:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000b96:	4b2e      	ldr	r3, [pc, #184]	; (8000c50 <HAL_GPIO_Init+0x2ec>)
 8000b98:	693a      	ldr	r2, [r7, #16]
 8000b9a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000b9c:	4b2c      	ldr	r3, [pc, #176]	; (8000c50 <HAL_GPIO_Init+0x2ec>)
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	43da      	mvns	r2, r3
 8000ba6:	693b      	ldr	r3, [r7, #16]
 8000ba8:	4013      	ands	r3, r2
 8000baa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	685a      	ldr	r2, [r3, #4]
 8000bb0:	2380      	movs	r3, #128	; 0x80
 8000bb2:	029b      	lsls	r3, r3, #10
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	d003      	beq.n	8000bc0 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000bb8:	693a      	ldr	r2, [r7, #16]
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000bc0:	4b23      	ldr	r3, [pc, #140]	; (8000c50 <HAL_GPIO_Init+0x2ec>)
 8000bc2:	693a      	ldr	r2, [r7, #16]
 8000bc4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bc6:	4b22      	ldr	r3, [pc, #136]	; (8000c50 <HAL_GPIO_Init+0x2ec>)
 8000bc8:	689b      	ldr	r3, [r3, #8]
 8000bca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	43da      	mvns	r2, r3
 8000bd0:	693b      	ldr	r3, [r7, #16]
 8000bd2:	4013      	ands	r3, r2
 8000bd4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	685a      	ldr	r2, [r3, #4]
 8000bda:	2380      	movs	r3, #128	; 0x80
 8000bdc:	035b      	lsls	r3, r3, #13
 8000bde:	4013      	ands	r3, r2
 8000be0:	d003      	beq.n	8000bea <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	4313      	orrs	r3, r2
 8000be8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000bea:	4b19      	ldr	r3, [pc, #100]	; (8000c50 <HAL_GPIO_Init+0x2ec>)
 8000bec:	693a      	ldr	r2, [r7, #16]
 8000bee:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000bf0:	4b17      	ldr	r3, [pc, #92]	; (8000c50 <HAL_GPIO_Init+0x2ec>)
 8000bf2:	68db      	ldr	r3, [r3, #12]
 8000bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	43da      	mvns	r2, r3
 8000bfa:	693b      	ldr	r3, [r7, #16]
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	685a      	ldr	r2, [r3, #4]
 8000c04:	2380      	movs	r3, #128	; 0x80
 8000c06:	039b      	lsls	r3, r3, #14
 8000c08:	4013      	ands	r3, r2
 8000c0a:	d003      	beq.n	8000c14 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000c0c:	693a      	ldr	r2, [r7, #16]
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	4313      	orrs	r3, r2
 8000c12:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c14:	4b0e      	ldr	r3, [pc, #56]	; (8000c50 <HAL_GPIO_Init+0x2ec>)
 8000c16:	693a      	ldr	r2, [r7, #16]
 8000c18:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	40da      	lsrs	r2, r3
 8000c28:	1e13      	subs	r3, r2, #0
 8000c2a:	d000      	beq.n	8000c2e <HAL_GPIO_Init+0x2ca>
 8000c2c:	e6a2      	b.n	8000974 <HAL_GPIO_Init+0x10>
  } 
}
 8000c2e:	46c0      	nop			; (mov r8, r8)
 8000c30:	46bd      	mov	sp, r7
 8000c32:	b006      	add	sp, #24
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	46c0      	nop			; (mov r8, r8)
 8000c38:	40021000 	.word	0x40021000
 8000c3c:	40010000 	.word	0x40010000
 8000c40:	48000400 	.word	0x48000400
 8000c44:	48000800 	.word	0x48000800
 8000c48:	48000c00 	.word	0x48000c00
 8000c4c:	48001000 	.word	0x48001000
 8000c50:	40010400 	.word	0x40010400

08000c54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	000a      	movs	r2, r1
 8000c5e:	1cbb      	adds	r3, r7, #2
 8000c60:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	691b      	ldr	r3, [r3, #16]
 8000c66:	1cba      	adds	r2, r7, #2
 8000c68:	8812      	ldrh	r2, [r2, #0]
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	d004      	beq.n	8000c78 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8000c6e:	230f      	movs	r3, #15
 8000c70:	18fb      	adds	r3, r7, r3
 8000c72:	2201      	movs	r2, #1
 8000c74:	701a      	strb	r2, [r3, #0]
 8000c76:	e003      	b.n	8000c80 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000c78:	230f      	movs	r3, #15
 8000c7a:	18fb      	adds	r3, r7, r3
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8000c80:	230f      	movs	r3, #15
 8000c82:	18fb      	adds	r3, r7, r3
 8000c84:	781b      	ldrb	r3, [r3, #0]
  }
 8000c86:	0018      	movs	r0, r3
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	b004      	add	sp, #16
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b082      	sub	sp, #8
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	6078      	str	r0, [r7, #4]
 8000c96:	0008      	movs	r0, r1
 8000c98:	0011      	movs	r1, r2
 8000c9a:	1cbb      	adds	r3, r7, #2
 8000c9c:	1c02      	adds	r2, r0, #0
 8000c9e:	801a      	strh	r2, [r3, #0]
 8000ca0:	1c7b      	adds	r3, r7, #1
 8000ca2:	1c0a      	adds	r2, r1, #0
 8000ca4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ca6:	1c7b      	adds	r3, r7, #1
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d004      	beq.n	8000cb8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000cae:	1cbb      	adds	r3, r7, #2
 8000cb0:	881a      	ldrh	r2, [r3, #0]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000cb6:	e003      	b.n	8000cc0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000cb8:	1cbb      	adds	r3, r7, #2
 8000cba:	881a      	ldrh	r2, [r3, #0]
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000cc0:	46c0      	nop			; (mov r8, r8)
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	b002      	add	sp, #8
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
 8000cd0:	000a      	movs	r2, r1
 8000cd2:	1cbb      	adds	r3, r7, #2
 8000cd4:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	695b      	ldr	r3, [r3, #20]
 8000cda:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000cdc:	1cbb      	adds	r3, r7, #2
 8000cde:	881b      	ldrh	r3, [r3, #0]
 8000ce0:	68fa      	ldr	r2, [r7, #12]
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	041a      	lsls	r2, r3, #16
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	43db      	mvns	r3, r3
 8000cea:	1cb9      	adds	r1, r7, #2
 8000cec:	8809      	ldrh	r1, [r1, #0]
 8000cee:	400b      	ands	r3, r1
 8000cf0:	431a      	orrs	r2, r3
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	619a      	str	r2, [r3, #24]
}
 8000cf6:	46c0      	nop			; (mov r8, r8)
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	b004      	add	sp, #16
 8000cfc:	bd80      	pop	{r7, pc}
	...

08000d00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b088      	sub	sp, #32
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d102      	bne.n	8000d14 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	f000 fb76 	bl	8001400 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	2201      	movs	r2, #1
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	d100      	bne.n	8000d20 <HAL_RCC_OscConfig+0x20>
 8000d1e:	e08e      	b.n	8000e3e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d20:	4bc5      	ldr	r3, [pc, #788]	; (8001038 <HAL_RCC_OscConfig+0x338>)
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	220c      	movs	r2, #12
 8000d26:	4013      	ands	r3, r2
 8000d28:	2b04      	cmp	r3, #4
 8000d2a:	d00e      	beq.n	8000d4a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d2c:	4bc2      	ldr	r3, [pc, #776]	; (8001038 <HAL_RCC_OscConfig+0x338>)
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	220c      	movs	r2, #12
 8000d32:	4013      	ands	r3, r2
 8000d34:	2b08      	cmp	r3, #8
 8000d36:	d117      	bne.n	8000d68 <HAL_RCC_OscConfig+0x68>
 8000d38:	4bbf      	ldr	r3, [pc, #764]	; (8001038 <HAL_RCC_OscConfig+0x338>)
 8000d3a:	685a      	ldr	r2, [r3, #4]
 8000d3c:	23c0      	movs	r3, #192	; 0xc0
 8000d3e:	025b      	lsls	r3, r3, #9
 8000d40:	401a      	ands	r2, r3
 8000d42:	2380      	movs	r3, #128	; 0x80
 8000d44:	025b      	lsls	r3, r3, #9
 8000d46:	429a      	cmp	r2, r3
 8000d48:	d10e      	bne.n	8000d68 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d4a:	4bbb      	ldr	r3, [pc, #748]	; (8001038 <HAL_RCC_OscConfig+0x338>)
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	2380      	movs	r3, #128	; 0x80
 8000d50:	029b      	lsls	r3, r3, #10
 8000d52:	4013      	ands	r3, r2
 8000d54:	d100      	bne.n	8000d58 <HAL_RCC_OscConfig+0x58>
 8000d56:	e071      	b.n	8000e3c <HAL_RCC_OscConfig+0x13c>
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d000      	beq.n	8000d62 <HAL_RCC_OscConfig+0x62>
 8000d60:	e06c      	b.n	8000e3c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	f000 fb4c 	bl	8001400 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	2b01      	cmp	r3, #1
 8000d6e:	d107      	bne.n	8000d80 <HAL_RCC_OscConfig+0x80>
 8000d70:	4bb1      	ldr	r3, [pc, #708]	; (8001038 <HAL_RCC_OscConfig+0x338>)
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	4bb0      	ldr	r3, [pc, #704]	; (8001038 <HAL_RCC_OscConfig+0x338>)
 8000d76:	2180      	movs	r1, #128	; 0x80
 8000d78:	0249      	lsls	r1, r1, #9
 8000d7a:	430a      	orrs	r2, r1
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	e02f      	b.n	8000de0 <HAL_RCC_OscConfig+0xe0>
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d10c      	bne.n	8000da2 <HAL_RCC_OscConfig+0xa2>
 8000d88:	4bab      	ldr	r3, [pc, #684]	; (8001038 <HAL_RCC_OscConfig+0x338>)
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	4baa      	ldr	r3, [pc, #680]	; (8001038 <HAL_RCC_OscConfig+0x338>)
 8000d8e:	49ab      	ldr	r1, [pc, #684]	; (800103c <HAL_RCC_OscConfig+0x33c>)
 8000d90:	400a      	ands	r2, r1
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	4ba8      	ldr	r3, [pc, #672]	; (8001038 <HAL_RCC_OscConfig+0x338>)
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	4ba7      	ldr	r3, [pc, #668]	; (8001038 <HAL_RCC_OscConfig+0x338>)
 8000d9a:	49a9      	ldr	r1, [pc, #676]	; (8001040 <HAL_RCC_OscConfig+0x340>)
 8000d9c:	400a      	ands	r2, r1
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	e01e      	b.n	8000de0 <HAL_RCC_OscConfig+0xe0>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	2b05      	cmp	r3, #5
 8000da8:	d10e      	bne.n	8000dc8 <HAL_RCC_OscConfig+0xc8>
 8000daa:	4ba3      	ldr	r3, [pc, #652]	; (8001038 <HAL_RCC_OscConfig+0x338>)
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	4ba2      	ldr	r3, [pc, #648]	; (8001038 <HAL_RCC_OscConfig+0x338>)
 8000db0:	2180      	movs	r1, #128	; 0x80
 8000db2:	02c9      	lsls	r1, r1, #11
 8000db4:	430a      	orrs	r2, r1
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	4b9f      	ldr	r3, [pc, #636]	; (8001038 <HAL_RCC_OscConfig+0x338>)
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	4b9e      	ldr	r3, [pc, #632]	; (8001038 <HAL_RCC_OscConfig+0x338>)
 8000dbe:	2180      	movs	r1, #128	; 0x80
 8000dc0:	0249      	lsls	r1, r1, #9
 8000dc2:	430a      	orrs	r2, r1
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	e00b      	b.n	8000de0 <HAL_RCC_OscConfig+0xe0>
 8000dc8:	4b9b      	ldr	r3, [pc, #620]	; (8001038 <HAL_RCC_OscConfig+0x338>)
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	4b9a      	ldr	r3, [pc, #616]	; (8001038 <HAL_RCC_OscConfig+0x338>)
 8000dce:	499b      	ldr	r1, [pc, #620]	; (800103c <HAL_RCC_OscConfig+0x33c>)
 8000dd0:	400a      	ands	r2, r1
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	4b98      	ldr	r3, [pc, #608]	; (8001038 <HAL_RCC_OscConfig+0x338>)
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	4b97      	ldr	r3, [pc, #604]	; (8001038 <HAL_RCC_OscConfig+0x338>)
 8000dda:	4999      	ldr	r1, [pc, #612]	; (8001040 <HAL_RCC_OscConfig+0x340>)
 8000ddc:	400a      	ands	r2, r1
 8000dde:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d014      	beq.n	8000e12 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000de8:	f7ff fc56 	bl	8000698 <HAL_GetTick>
 8000dec:	0003      	movs	r3, r0
 8000dee:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000df0:	e008      	b.n	8000e04 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000df2:	f7ff fc51 	bl	8000698 <HAL_GetTick>
 8000df6:	0002      	movs	r2, r0
 8000df8:	69bb      	ldr	r3, [r7, #24]
 8000dfa:	1ad3      	subs	r3, r2, r3
 8000dfc:	2b64      	cmp	r3, #100	; 0x64
 8000dfe:	d901      	bls.n	8000e04 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8000e00:	2303      	movs	r3, #3
 8000e02:	e2fd      	b.n	8001400 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e04:	4b8c      	ldr	r3, [pc, #560]	; (8001038 <HAL_RCC_OscConfig+0x338>)
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	2380      	movs	r3, #128	; 0x80
 8000e0a:	029b      	lsls	r3, r3, #10
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	d0f0      	beq.n	8000df2 <HAL_RCC_OscConfig+0xf2>
 8000e10:	e015      	b.n	8000e3e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e12:	f7ff fc41 	bl	8000698 <HAL_GetTick>
 8000e16:	0003      	movs	r3, r0
 8000e18:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e1a:	e008      	b.n	8000e2e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e1c:	f7ff fc3c 	bl	8000698 <HAL_GetTick>
 8000e20:	0002      	movs	r2, r0
 8000e22:	69bb      	ldr	r3, [r7, #24]
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	2b64      	cmp	r3, #100	; 0x64
 8000e28:	d901      	bls.n	8000e2e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	e2e8      	b.n	8001400 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e2e:	4b82      	ldr	r3, [pc, #520]	; (8001038 <HAL_RCC_OscConfig+0x338>)
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	2380      	movs	r3, #128	; 0x80
 8000e34:	029b      	lsls	r3, r3, #10
 8000e36:	4013      	ands	r3, r2
 8000e38:	d1f0      	bne.n	8000e1c <HAL_RCC_OscConfig+0x11c>
 8000e3a:	e000      	b.n	8000e3e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e3c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	2202      	movs	r2, #2
 8000e44:	4013      	ands	r3, r2
 8000e46:	d100      	bne.n	8000e4a <HAL_RCC_OscConfig+0x14a>
 8000e48:	e06c      	b.n	8000f24 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000e4a:	4b7b      	ldr	r3, [pc, #492]	; (8001038 <HAL_RCC_OscConfig+0x338>)
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	220c      	movs	r2, #12
 8000e50:	4013      	ands	r3, r2
 8000e52:	d00e      	beq.n	8000e72 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000e54:	4b78      	ldr	r3, [pc, #480]	; (8001038 <HAL_RCC_OscConfig+0x338>)
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	220c      	movs	r2, #12
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	2b08      	cmp	r3, #8
 8000e5e:	d11f      	bne.n	8000ea0 <HAL_RCC_OscConfig+0x1a0>
 8000e60:	4b75      	ldr	r3, [pc, #468]	; (8001038 <HAL_RCC_OscConfig+0x338>)
 8000e62:	685a      	ldr	r2, [r3, #4]
 8000e64:	23c0      	movs	r3, #192	; 0xc0
 8000e66:	025b      	lsls	r3, r3, #9
 8000e68:	401a      	ands	r2, r3
 8000e6a:	2380      	movs	r3, #128	; 0x80
 8000e6c:	021b      	lsls	r3, r3, #8
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d116      	bne.n	8000ea0 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e72:	4b71      	ldr	r3, [pc, #452]	; (8001038 <HAL_RCC_OscConfig+0x338>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	2202      	movs	r2, #2
 8000e78:	4013      	ands	r3, r2
 8000e7a:	d005      	beq.n	8000e88 <HAL_RCC_OscConfig+0x188>
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	d001      	beq.n	8000e88 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8000e84:	2301      	movs	r3, #1
 8000e86:	e2bb      	b.n	8001400 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e88:	4b6b      	ldr	r3, [pc, #428]	; (8001038 <HAL_RCC_OscConfig+0x338>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	22f8      	movs	r2, #248	; 0xf8
 8000e8e:	4393      	bics	r3, r2
 8000e90:	0019      	movs	r1, r3
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	691b      	ldr	r3, [r3, #16]
 8000e96:	00da      	lsls	r2, r3, #3
 8000e98:	4b67      	ldr	r3, [pc, #412]	; (8001038 <HAL_RCC_OscConfig+0x338>)
 8000e9a:	430a      	orrs	r2, r1
 8000e9c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e9e:	e041      	b.n	8000f24 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d024      	beq.n	8000ef2 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ea8:	4b63      	ldr	r3, [pc, #396]	; (8001038 <HAL_RCC_OscConfig+0x338>)
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	4b62      	ldr	r3, [pc, #392]	; (8001038 <HAL_RCC_OscConfig+0x338>)
 8000eae:	2101      	movs	r1, #1
 8000eb0:	430a      	orrs	r2, r1
 8000eb2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eb4:	f7ff fbf0 	bl	8000698 <HAL_GetTick>
 8000eb8:	0003      	movs	r3, r0
 8000eba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ebc:	e008      	b.n	8000ed0 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ebe:	f7ff fbeb 	bl	8000698 <HAL_GetTick>
 8000ec2:	0002      	movs	r2, r0
 8000ec4:	69bb      	ldr	r3, [r7, #24]
 8000ec6:	1ad3      	subs	r3, r2, r3
 8000ec8:	2b02      	cmp	r3, #2
 8000eca:	d901      	bls.n	8000ed0 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8000ecc:	2303      	movs	r3, #3
 8000ece:	e297      	b.n	8001400 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ed0:	4b59      	ldr	r3, [pc, #356]	; (8001038 <HAL_RCC_OscConfig+0x338>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2202      	movs	r2, #2
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	d0f1      	beq.n	8000ebe <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000eda:	4b57      	ldr	r3, [pc, #348]	; (8001038 <HAL_RCC_OscConfig+0x338>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	22f8      	movs	r2, #248	; 0xf8
 8000ee0:	4393      	bics	r3, r2
 8000ee2:	0019      	movs	r1, r3
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	691b      	ldr	r3, [r3, #16]
 8000ee8:	00da      	lsls	r2, r3, #3
 8000eea:	4b53      	ldr	r3, [pc, #332]	; (8001038 <HAL_RCC_OscConfig+0x338>)
 8000eec:	430a      	orrs	r2, r1
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	e018      	b.n	8000f24 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ef2:	4b51      	ldr	r3, [pc, #324]	; (8001038 <HAL_RCC_OscConfig+0x338>)
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	4b50      	ldr	r3, [pc, #320]	; (8001038 <HAL_RCC_OscConfig+0x338>)
 8000ef8:	2101      	movs	r1, #1
 8000efa:	438a      	bics	r2, r1
 8000efc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000efe:	f7ff fbcb 	bl	8000698 <HAL_GetTick>
 8000f02:	0003      	movs	r3, r0
 8000f04:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f06:	e008      	b.n	8000f1a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f08:	f7ff fbc6 	bl	8000698 <HAL_GetTick>
 8000f0c:	0002      	movs	r2, r0
 8000f0e:	69bb      	ldr	r3, [r7, #24]
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	2b02      	cmp	r3, #2
 8000f14:	d901      	bls.n	8000f1a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8000f16:	2303      	movs	r3, #3
 8000f18:	e272      	b.n	8001400 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f1a:	4b47      	ldr	r3, [pc, #284]	; (8001038 <HAL_RCC_OscConfig+0x338>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	2202      	movs	r2, #2
 8000f20:	4013      	ands	r3, r2
 8000f22:	d1f1      	bne.n	8000f08 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2208      	movs	r2, #8
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	d036      	beq.n	8000f9c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	69db      	ldr	r3, [r3, #28]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d019      	beq.n	8000f6a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f36:	4b40      	ldr	r3, [pc, #256]	; (8001038 <HAL_RCC_OscConfig+0x338>)
 8000f38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f3a:	4b3f      	ldr	r3, [pc, #252]	; (8001038 <HAL_RCC_OscConfig+0x338>)
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	430a      	orrs	r2, r1
 8000f40:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f42:	f7ff fba9 	bl	8000698 <HAL_GetTick>
 8000f46:	0003      	movs	r3, r0
 8000f48:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f4a:	e008      	b.n	8000f5e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f4c:	f7ff fba4 	bl	8000698 <HAL_GetTick>
 8000f50:	0002      	movs	r2, r0
 8000f52:	69bb      	ldr	r3, [r7, #24]
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	2b02      	cmp	r3, #2
 8000f58:	d901      	bls.n	8000f5e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8000f5a:	2303      	movs	r3, #3
 8000f5c:	e250      	b.n	8001400 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f5e:	4b36      	ldr	r3, [pc, #216]	; (8001038 <HAL_RCC_OscConfig+0x338>)
 8000f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f62:	2202      	movs	r2, #2
 8000f64:	4013      	ands	r3, r2
 8000f66:	d0f1      	beq.n	8000f4c <HAL_RCC_OscConfig+0x24c>
 8000f68:	e018      	b.n	8000f9c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f6a:	4b33      	ldr	r3, [pc, #204]	; (8001038 <HAL_RCC_OscConfig+0x338>)
 8000f6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f6e:	4b32      	ldr	r3, [pc, #200]	; (8001038 <HAL_RCC_OscConfig+0x338>)
 8000f70:	2101      	movs	r1, #1
 8000f72:	438a      	bics	r2, r1
 8000f74:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f76:	f7ff fb8f 	bl	8000698 <HAL_GetTick>
 8000f7a:	0003      	movs	r3, r0
 8000f7c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f7e:	e008      	b.n	8000f92 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f80:	f7ff fb8a 	bl	8000698 <HAL_GetTick>
 8000f84:	0002      	movs	r2, r0
 8000f86:	69bb      	ldr	r3, [r7, #24]
 8000f88:	1ad3      	subs	r3, r2, r3
 8000f8a:	2b02      	cmp	r3, #2
 8000f8c:	d901      	bls.n	8000f92 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8000f8e:	2303      	movs	r3, #3
 8000f90:	e236      	b.n	8001400 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f92:	4b29      	ldr	r3, [pc, #164]	; (8001038 <HAL_RCC_OscConfig+0x338>)
 8000f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f96:	2202      	movs	r2, #2
 8000f98:	4013      	ands	r3, r2
 8000f9a:	d1f1      	bne.n	8000f80 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	2204      	movs	r2, #4
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	d100      	bne.n	8000fa8 <HAL_RCC_OscConfig+0x2a8>
 8000fa6:	e0b5      	b.n	8001114 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000fa8:	231f      	movs	r3, #31
 8000faa:	18fb      	adds	r3, r7, r3
 8000fac:	2200      	movs	r2, #0
 8000fae:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fb0:	4b21      	ldr	r3, [pc, #132]	; (8001038 <HAL_RCC_OscConfig+0x338>)
 8000fb2:	69da      	ldr	r2, [r3, #28]
 8000fb4:	2380      	movs	r3, #128	; 0x80
 8000fb6:	055b      	lsls	r3, r3, #21
 8000fb8:	4013      	ands	r3, r2
 8000fba:	d111      	bne.n	8000fe0 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fbc:	4b1e      	ldr	r3, [pc, #120]	; (8001038 <HAL_RCC_OscConfig+0x338>)
 8000fbe:	69da      	ldr	r2, [r3, #28]
 8000fc0:	4b1d      	ldr	r3, [pc, #116]	; (8001038 <HAL_RCC_OscConfig+0x338>)
 8000fc2:	2180      	movs	r1, #128	; 0x80
 8000fc4:	0549      	lsls	r1, r1, #21
 8000fc6:	430a      	orrs	r2, r1
 8000fc8:	61da      	str	r2, [r3, #28]
 8000fca:	4b1b      	ldr	r3, [pc, #108]	; (8001038 <HAL_RCC_OscConfig+0x338>)
 8000fcc:	69da      	ldr	r2, [r3, #28]
 8000fce:	2380      	movs	r3, #128	; 0x80
 8000fd0:	055b      	lsls	r3, r3, #21
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	60fb      	str	r3, [r7, #12]
 8000fd6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000fd8:	231f      	movs	r3, #31
 8000fda:	18fb      	adds	r3, r7, r3
 8000fdc:	2201      	movs	r2, #1
 8000fde:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fe0:	4b18      	ldr	r3, [pc, #96]	; (8001044 <HAL_RCC_OscConfig+0x344>)
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	2380      	movs	r3, #128	; 0x80
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	4013      	ands	r3, r2
 8000fea:	d11a      	bne.n	8001022 <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fec:	4b15      	ldr	r3, [pc, #84]	; (8001044 <HAL_RCC_OscConfig+0x344>)
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	4b14      	ldr	r3, [pc, #80]	; (8001044 <HAL_RCC_OscConfig+0x344>)
 8000ff2:	2180      	movs	r1, #128	; 0x80
 8000ff4:	0049      	lsls	r1, r1, #1
 8000ff6:	430a      	orrs	r2, r1
 8000ff8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000ffa:	f7ff fb4d 	bl	8000698 <HAL_GetTick>
 8000ffe:	0003      	movs	r3, r0
 8001000:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001002:	e008      	b.n	8001016 <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001004:	f7ff fb48 	bl	8000698 <HAL_GetTick>
 8001008:	0002      	movs	r2, r0
 800100a:	69bb      	ldr	r3, [r7, #24]
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	2b64      	cmp	r3, #100	; 0x64
 8001010:	d901      	bls.n	8001016 <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 8001012:	2303      	movs	r3, #3
 8001014:	e1f4      	b.n	8001400 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001016:	4b0b      	ldr	r3, [pc, #44]	; (8001044 <HAL_RCC_OscConfig+0x344>)
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	2380      	movs	r3, #128	; 0x80
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	4013      	ands	r3, r2
 8001020:	d0f0      	beq.n	8001004 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	2b01      	cmp	r3, #1
 8001028:	d10e      	bne.n	8001048 <HAL_RCC_OscConfig+0x348>
 800102a:	4b03      	ldr	r3, [pc, #12]	; (8001038 <HAL_RCC_OscConfig+0x338>)
 800102c:	6a1a      	ldr	r2, [r3, #32]
 800102e:	4b02      	ldr	r3, [pc, #8]	; (8001038 <HAL_RCC_OscConfig+0x338>)
 8001030:	2101      	movs	r1, #1
 8001032:	430a      	orrs	r2, r1
 8001034:	621a      	str	r2, [r3, #32]
 8001036:	e035      	b.n	80010a4 <HAL_RCC_OscConfig+0x3a4>
 8001038:	40021000 	.word	0x40021000
 800103c:	fffeffff 	.word	0xfffeffff
 8001040:	fffbffff 	.word	0xfffbffff
 8001044:	40007000 	.word	0x40007000
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	689b      	ldr	r3, [r3, #8]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d10c      	bne.n	800106a <HAL_RCC_OscConfig+0x36a>
 8001050:	4bca      	ldr	r3, [pc, #808]	; (800137c <HAL_RCC_OscConfig+0x67c>)
 8001052:	6a1a      	ldr	r2, [r3, #32]
 8001054:	4bc9      	ldr	r3, [pc, #804]	; (800137c <HAL_RCC_OscConfig+0x67c>)
 8001056:	2101      	movs	r1, #1
 8001058:	438a      	bics	r2, r1
 800105a:	621a      	str	r2, [r3, #32]
 800105c:	4bc7      	ldr	r3, [pc, #796]	; (800137c <HAL_RCC_OscConfig+0x67c>)
 800105e:	6a1a      	ldr	r2, [r3, #32]
 8001060:	4bc6      	ldr	r3, [pc, #792]	; (800137c <HAL_RCC_OscConfig+0x67c>)
 8001062:	2104      	movs	r1, #4
 8001064:	438a      	bics	r2, r1
 8001066:	621a      	str	r2, [r3, #32]
 8001068:	e01c      	b.n	80010a4 <HAL_RCC_OscConfig+0x3a4>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	689b      	ldr	r3, [r3, #8]
 800106e:	2b05      	cmp	r3, #5
 8001070:	d10c      	bne.n	800108c <HAL_RCC_OscConfig+0x38c>
 8001072:	4bc2      	ldr	r3, [pc, #776]	; (800137c <HAL_RCC_OscConfig+0x67c>)
 8001074:	6a1a      	ldr	r2, [r3, #32]
 8001076:	4bc1      	ldr	r3, [pc, #772]	; (800137c <HAL_RCC_OscConfig+0x67c>)
 8001078:	2104      	movs	r1, #4
 800107a:	430a      	orrs	r2, r1
 800107c:	621a      	str	r2, [r3, #32]
 800107e:	4bbf      	ldr	r3, [pc, #764]	; (800137c <HAL_RCC_OscConfig+0x67c>)
 8001080:	6a1a      	ldr	r2, [r3, #32]
 8001082:	4bbe      	ldr	r3, [pc, #760]	; (800137c <HAL_RCC_OscConfig+0x67c>)
 8001084:	2101      	movs	r1, #1
 8001086:	430a      	orrs	r2, r1
 8001088:	621a      	str	r2, [r3, #32]
 800108a:	e00b      	b.n	80010a4 <HAL_RCC_OscConfig+0x3a4>
 800108c:	4bbb      	ldr	r3, [pc, #748]	; (800137c <HAL_RCC_OscConfig+0x67c>)
 800108e:	6a1a      	ldr	r2, [r3, #32]
 8001090:	4bba      	ldr	r3, [pc, #744]	; (800137c <HAL_RCC_OscConfig+0x67c>)
 8001092:	2101      	movs	r1, #1
 8001094:	438a      	bics	r2, r1
 8001096:	621a      	str	r2, [r3, #32]
 8001098:	4bb8      	ldr	r3, [pc, #736]	; (800137c <HAL_RCC_OscConfig+0x67c>)
 800109a:	6a1a      	ldr	r2, [r3, #32]
 800109c:	4bb7      	ldr	r3, [pc, #732]	; (800137c <HAL_RCC_OscConfig+0x67c>)
 800109e:	2104      	movs	r1, #4
 80010a0:	438a      	bics	r2, r1
 80010a2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d014      	beq.n	80010d6 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010ac:	f7ff faf4 	bl	8000698 <HAL_GetTick>
 80010b0:	0003      	movs	r3, r0
 80010b2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010b4:	e009      	b.n	80010ca <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010b6:	f7ff faef 	bl	8000698 <HAL_GetTick>
 80010ba:	0002      	movs	r2, r0
 80010bc:	69bb      	ldr	r3, [r7, #24]
 80010be:	1ad3      	subs	r3, r2, r3
 80010c0:	4aaf      	ldr	r2, [pc, #700]	; (8001380 <HAL_RCC_OscConfig+0x680>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d901      	bls.n	80010ca <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80010c6:	2303      	movs	r3, #3
 80010c8:	e19a      	b.n	8001400 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010ca:	4bac      	ldr	r3, [pc, #688]	; (800137c <HAL_RCC_OscConfig+0x67c>)
 80010cc:	6a1b      	ldr	r3, [r3, #32]
 80010ce:	2202      	movs	r2, #2
 80010d0:	4013      	ands	r3, r2
 80010d2:	d0f0      	beq.n	80010b6 <HAL_RCC_OscConfig+0x3b6>
 80010d4:	e013      	b.n	80010fe <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010d6:	f7ff fadf 	bl	8000698 <HAL_GetTick>
 80010da:	0003      	movs	r3, r0
 80010dc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010de:	e009      	b.n	80010f4 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010e0:	f7ff fada 	bl	8000698 <HAL_GetTick>
 80010e4:	0002      	movs	r2, r0
 80010e6:	69bb      	ldr	r3, [r7, #24]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	4aa5      	ldr	r2, [pc, #660]	; (8001380 <HAL_RCC_OscConfig+0x680>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d901      	bls.n	80010f4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80010f0:	2303      	movs	r3, #3
 80010f2:	e185      	b.n	8001400 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010f4:	4ba1      	ldr	r3, [pc, #644]	; (800137c <HAL_RCC_OscConfig+0x67c>)
 80010f6:	6a1b      	ldr	r3, [r3, #32]
 80010f8:	2202      	movs	r2, #2
 80010fa:	4013      	ands	r3, r2
 80010fc:	d1f0      	bne.n	80010e0 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80010fe:	231f      	movs	r3, #31
 8001100:	18fb      	adds	r3, r7, r3
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	2b01      	cmp	r3, #1
 8001106:	d105      	bne.n	8001114 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001108:	4b9c      	ldr	r3, [pc, #624]	; (800137c <HAL_RCC_OscConfig+0x67c>)
 800110a:	69da      	ldr	r2, [r3, #28]
 800110c:	4b9b      	ldr	r3, [pc, #620]	; (800137c <HAL_RCC_OscConfig+0x67c>)
 800110e:	499d      	ldr	r1, [pc, #628]	; (8001384 <HAL_RCC_OscConfig+0x684>)
 8001110:	400a      	ands	r2, r1
 8001112:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2210      	movs	r2, #16
 800111a:	4013      	ands	r3, r2
 800111c:	d063      	beq.n	80011e6 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	695b      	ldr	r3, [r3, #20]
 8001122:	2b01      	cmp	r3, #1
 8001124:	d12a      	bne.n	800117c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001126:	4b95      	ldr	r3, [pc, #596]	; (800137c <HAL_RCC_OscConfig+0x67c>)
 8001128:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800112a:	4b94      	ldr	r3, [pc, #592]	; (800137c <HAL_RCC_OscConfig+0x67c>)
 800112c:	2104      	movs	r1, #4
 800112e:	430a      	orrs	r2, r1
 8001130:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001132:	4b92      	ldr	r3, [pc, #584]	; (800137c <HAL_RCC_OscConfig+0x67c>)
 8001134:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001136:	4b91      	ldr	r3, [pc, #580]	; (800137c <HAL_RCC_OscConfig+0x67c>)
 8001138:	2101      	movs	r1, #1
 800113a:	430a      	orrs	r2, r1
 800113c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800113e:	f7ff faab 	bl	8000698 <HAL_GetTick>
 8001142:	0003      	movs	r3, r0
 8001144:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001146:	e008      	b.n	800115a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001148:	f7ff faa6 	bl	8000698 <HAL_GetTick>
 800114c:	0002      	movs	r2, r0
 800114e:	69bb      	ldr	r3, [r7, #24]
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	2b02      	cmp	r3, #2
 8001154:	d901      	bls.n	800115a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001156:	2303      	movs	r3, #3
 8001158:	e152      	b.n	8001400 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800115a:	4b88      	ldr	r3, [pc, #544]	; (800137c <HAL_RCC_OscConfig+0x67c>)
 800115c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800115e:	2202      	movs	r2, #2
 8001160:	4013      	ands	r3, r2
 8001162:	d0f1      	beq.n	8001148 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001164:	4b85      	ldr	r3, [pc, #532]	; (800137c <HAL_RCC_OscConfig+0x67c>)
 8001166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001168:	22f8      	movs	r2, #248	; 0xf8
 800116a:	4393      	bics	r3, r2
 800116c:	0019      	movs	r1, r3
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	699b      	ldr	r3, [r3, #24]
 8001172:	00da      	lsls	r2, r3, #3
 8001174:	4b81      	ldr	r3, [pc, #516]	; (800137c <HAL_RCC_OscConfig+0x67c>)
 8001176:	430a      	orrs	r2, r1
 8001178:	635a      	str	r2, [r3, #52]	; 0x34
 800117a:	e034      	b.n	80011e6 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	695b      	ldr	r3, [r3, #20]
 8001180:	3305      	adds	r3, #5
 8001182:	d111      	bne.n	80011a8 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001184:	4b7d      	ldr	r3, [pc, #500]	; (800137c <HAL_RCC_OscConfig+0x67c>)
 8001186:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001188:	4b7c      	ldr	r3, [pc, #496]	; (800137c <HAL_RCC_OscConfig+0x67c>)
 800118a:	2104      	movs	r1, #4
 800118c:	438a      	bics	r2, r1
 800118e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001190:	4b7a      	ldr	r3, [pc, #488]	; (800137c <HAL_RCC_OscConfig+0x67c>)
 8001192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001194:	22f8      	movs	r2, #248	; 0xf8
 8001196:	4393      	bics	r3, r2
 8001198:	0019      	movs	r1, r3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	699b      	ldr	r3, [r3, #24]
 800119e:	00da      	lsls	r2, r3, #3
 80011a0:	4b76      	ldr	r3, [pc, #472]	; (800137c <HAL_RCC_OscConfig+0x67c>)
 80011a2:	430a      	orrs	r2, r1
 80011a4:	635a      	str	r2, [r3, #52]	; 0x34
 80011a6:	e01e      	b.n	80011e6 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80011a8:	4b74      	ldr	r3, [pc, #464]	; (800137c <HAL_RCC_OscConfig+0x67c>)
 80011aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011ac:	4b73      	ldr	r3, [pc, #460]	; (800137c <HAL_RCC_OscConfig+0x67c>)
 80011ae:	2104      	movs	r1, #4
 80011b0:	430a      	orrs	r2, r1
 80011b2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80011b4:	4b71      	ldr	r3, [pc, #452]	; (800137c <HAL_RCC_OscConfig+0x67c>)
 80011b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011b8:	4b70      	ldr	r3, [pc, #448]	; (800137c <HAL_RCC_OscConfig+0x67c>)
 80011ba:	2101      	movs	r1, #1
 80011bc:	438a      	bics	r2, r1
 80011be:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011c0:	f7ff fa6a 	bl	8000698 <HAL_GetTick>
 80011c4:	0003      	movs	r3, r0
 80011c6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80011c8:	e008      	b.n	80011dc <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80011ca:	f7ff fa65 	bl	8000698 <HAL_GetTick>
 80011ce:	0002      	movs	r2, r0
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	2b02      	cmp	r3, #2
 80011d6:	d901      	bls.n	80011dc <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80011d8:	2303      	movs	r3, #3
 80011da:	e111      	b.n	8001400 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80011dc:	4b67      	ldr	r3, [pc, #412]	; (800137c <HAL_RCC_OscConfig+0x67c>)
 80011de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011e0:	2202      	movs	r2, #2
 80011e2:	4013      	ands	r3, r2
 80011e4:	d1f1      	bne.n	80011ca <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	2220      	movs	r2, #32
 80011ec:	4013      	ands	r3, r2
 80011ee:	d05c      	beq.n	80012aa <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80011f0:	4b62      	ldr	r3, [pc, #392]	; (800137c <HAL_RCC_OscConfig+0x67c>)
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	220c      	movs	r2, #12
 80011f6:	4013      	ands	r3, r2
 80011f8:	2b0c      	cmp	r3, #12
 80011fa:	d00e      	beq.n	800121a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80011fc:	4b5f      	ldr	r3, [pc, #380]	; (800137c <HAL_RCC_OscConfig+0x67c>)
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	220c      	movs	r2, #12
 8001202:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001204:	2b08      	cmp	r3, #8
 8001206:	d114      	bne.n	8001232 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001208:	4b5c      	ldr	r3, [pc, #368]	; (800137c <HAL_RCC_OscConfig+0x67c>)
 800120a:	685a      	ldr	r2, [r3, #4]
 800120c:	23c0      	movs	r3, #192	; 0xc0
 800120e:	025b      	lsls	r3, r3, #9
 8001210:	401a      	ands	r2, r3
 8001212:	23c0      	movs	r3, #192	; 0xc0
 8001214:	025b      	lsls	r3, r3, #9
 8001216:	429a      	cmp	r2, r3
 8001218:	d10b      	bne.n	8001232 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800121a:	4b58      	ldr	r3, [pc, #352]	; (800137c <HAL_RCC_OscConfig+0x67c>)
 800121c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800121e:	2380      	movs	r3, #128	; 0x80
 8001220:	025b      	lsls	r3, r3, #9
 8001222:	4013      	ands	r3, r2
 8001224:	d040      	beq.n	80012a8 <HAL_RCC_OscConfig+0x5a8>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6a1b      	ldr	r3, [r3, #32]
 800122a:	2b01      	cmp	r3, #1
 800122c:	d03c      	beq.n	80012a8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e0e6      	b.n	8001400 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6a1b      	ldr	r3, [r3, #32]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d01b      	beq.n	8001272 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800123a:	4b50      	ldr	r3, [pc, #320]	; (800137c <HAL_RCC_OscConfig+0x67c>)
 800123c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800123e:	4b4f      	ldr	r3, [pc, #316]	; (800137c <HAL_RCC_OscConfig+0x67c>)
 8001240:	2180      	movs	r1, #128	; 0x80
 8001242:	0249      	lsls	r1, r1, #9
 8001244:	430a      	orrs	r2, r1
 8001246:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001248:	f7ff fa26 	bl	8000698 <HAL_GetTick>
 800124c:	0003      	movs	r3, r0
 800124e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001250:	e008      	b.n	8001264 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001252:	f7ff fa21 	bl	8000698 <HAL_GetTick>
 8001256:	0002      	movs	r2, r0
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	2b02      	cmp	r3, #2
 800125e:	d901      	bls.n	8001264 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001260:	2303      	movs	r3, #3
 8001262:	e0cd      	b.n	8001400 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001264:	4b45      	ldr	r3, [pc, #276]	; (800137c <HAL_RCC_OscConfig+0x67c>)
 8001266:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001268:	2380      	movs	r3, #128	; 0x80
 800126a:	025b      	lsls	r3, r3, #9
 800126c:	4013      	ands	r3, r2
 800126e:	d0f0      	beq.n	8001252 <HAL_RCC_OscConfig+0x552>
 8001270:	e01b      	b.n	80012aa <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001272:	4b42      	ldr	r3, [pc, #264]	; (800137c <HAL_RCC_OscConfig+0x67c>)
 8001274:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001276:	4b41      	ldr	r3, [pc, #260]	; (800137c <HAL_RCC_OscConfig+0x67c>)
 8001278:	4943      	ldr	r1, [pc, #268]	; (8001388 <HAL_RCC_OscConfig+0x688>)
 800127a:	400a      	ands	r2, r1
 800127c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800127e:	f7ff fa0b 	bl	8000698 <HAL_GetTick>
 8001282:	0003      	movs	r3, r0
 8001284:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001286:	e008      	b.n	800129a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001288:	f7ff fa06 	bl	8000698 <HAL_GetTick>
 800128c:	0002      	movs	r2, r0
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	2b02      	cmp	r3, #2
 8001294:	d901      	bls.n	800129a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001296:	2303      	movs	r3, #3
 8001298:	e0b2      	b.n	8001400 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800129a:	4b38      	ldr	r3, [pc, #224]	; (800137c <HAL_RCC_OscConfig+0x67c>)
 800129c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800129e:	2380      	movs	r3, #128	; 0x80
 80012a0:	025b      	lsls	r3, r3, #9
 80012a2:	4013      	ands	r3, r2
 80012a4:	d1f0      	bne.n	8001288 <HAL_RCC_OscConfig+0x588>
 80012a6:	e000      	b.n	80012aa <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80012a8:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d100      	bne.n	80012b4 <HAL_RCC_OscConfig+0x5b4>
 80012b2:	e0a4      	b.n	80013fe <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012b4:	4b31      	ldr	r3, [pc, #196]	; (800137c <HAL_RCC_OscConfig+0x67c>)
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	220c      	movs	r2, #12
 80012ba:	4013      	ands	r3, r2
 80012bc:	2b08      	cmp	r3, #8
 80012be:	d100      	bne.n	80012c2 <HAL_RCC_OscConfig+0x5c2>
 80012c0:	e078      	b.n	80013b4 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d14c      	bne.n	8001364 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012ca:	4b2c      	ldr	r3, [pc, #176]	; (800137c <HAL_RCC_OscConfig+0x67c>)
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	4b2b      	ldr	r3, [pc, #172]	; (800137c <HAL_RCC_OscConfig+0x67c>)
 80012d0:	492e      	ldr	r1, [pc, #184]	; (800138c <HAL_RCC_OscConfig+0x68c>)
 80012d2:	400a      	ands	r2, r1
 80012d4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d6:	f7ff f9df 	bl	8000698 <HAL_GetTick>
 80012da:	0003      	movs	r3, r0
 80012dc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012de:	e008      	b.n	80012f2 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012e0:	f7ff f9da 	bl	8000698 <HAL_GetTick>
 80012e4:	0002      	movs	r2, r0
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	2b02      	cmp	r3, #2
 80012ec:	d901      	bls.n	80012f2 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80012ee:	2303      	movs	r3, #3
 80012f0:	e086      	b.n	8001400 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012f2:	4b22      	ldr	r3, [pc, #136]	; (800137c <HAL_RCC_OscConfig+0x67c>)
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	2380      	movs	r3, #128	; 0x80
 80012f8:	049b      	lsls	r3, r3, #18
 80012fa:	4013      	ands	r3, r2
 80012fc:	d1f0      	bne.n	80012e0 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012fe:	4b1f      	ldr	r3, [pc, #124]	; (800137c <HAL_RCC_OscConfig+0x67c>)
 8001300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001302:	220f      	movs	r2, #15
 8001304:	4393      	bics	r3, r2
 8001306:	0019      	movs	r1, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800130c:	4b1b      	ldr	r3, [pc, #108]	; (800137c <HAL_RCC_OscConfig+0x67c>)
 800130e:	430a      	orrs	r2, r1
 8001310:	62da      	str	r2, [r3, #44]	; 0x2c
 8001312:	4b1a      	ldr	r3, [pc, #104]	; (800137c <HAL_RCC_OscConfig+0x67c>)
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	4a1e      	ldr	r2, [pc, #120]	; (8001390 <HAL_RCC_OscConfig+0x690>)
 8001318:	4013      	ands	r3, r2
 800131a:	0019      	movs	r1, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001324:	431a      	orrs	r2, r3
 8001326:	4b15      	ldr	r3, [pc, #84]	; (800137c <HAL_RCC_OscConfig+0x67c>)
 8001328:	430a      	orrs	r2, r1
 800132a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800132c:	4b13      	ldr	r3, [pc, #76]	; (800137c <HAL_RCC_OscConfig+0x67c>)
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	4b12      	ldr	r3, [pc, #72]	; (800137c <HAL_RCC_OscConfig+0x67c>)
 8001332:	2180      	movs	r1, #128	; 0x80
 8001334:	0449      	lsls	r1, r1, #17
 8001336:	430a      	orrs	r2, r1
 8001338:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800133a:	f7ff f9ad 	bl	8000698 <HAL_GetTick>
 800133e:	0003      	movs	r3, r0
 8001340:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001342:	e008      	b.n	8001356 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001344:	f7ff f9a8 	bl	8000698 <HAL_GetTick>
 8001348:	0002      	movs	r2, r0
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	2b02      	cmp	r3, #2
 8001350:	d901      	bls.n	8001356 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001352:	2303      	movs	r3, #3
 8001354:	e054      	b.n	8001400 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001356:	4b09      	ldr	r3, [pc, #36]	; (800137c <HAL_RCC_OscConfig+0x67c>)
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	2380      	movs	r3, #128	; 0x80
 800135c:	049b      	lsls	r3, r3, #18
 800135e:	4013      	ands	r3, r2
 8001360:	d0f0      	beq.n	8001344 <HAL_RCC_OscConfig+0x644>
 8001362:	e04c      	b.n	80013fe <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001364:	4b05      	ldr	r3, [pc, #20]	; (800137c <HAL_RCC_OscConfig+0x67c>)
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	4b04      	ldr	r3, [pc, #16]	; (800137c <HAL_RCC_OscConfig+0x67c>)
 800136a:	4908      	ldr	r1, [pc, #32]	; (800138c <HAL_RCC_OscConfig+0x68c>)
 800136c:	400a      	ands	r2, r1
 800136e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001370:	f7ff f992 	bl	8000698 <HAL_GetTick>
 8001374:	0003      	movs	r3, r0
 8001376:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001378:	e015      	b.n	80013a6 <HAL_RCC_OscConfig+0x6a6>
 800137a:	46c0      	nop			; (mov r8, r8)
 800137c:	40021000 	.word	0x40021000
 8001380:	00001388 	.word	0x00001388
 8001384:	efffffff 	.word	0xefffffff
 8001388:	fffeffff 	.word	0xfffeffff
 800138c:	feffffff 	.word	0xfeffffff
 8001390:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001394:	f7ff f980 	bl	8000698 <HAL_GetTick>
 8001398:	0002      	movs	r2, r0
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d901      	bls.n	80013a6 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e02c      	b.n	8001400 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013a6:	4b18      	ldr	r3, [pc, #96]	; (8001408 <HAL_RCC_OscConfig+0x708>)
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	2380      	movs	r3, #128	; 0x80
 80013ac:	049b      	lsls	r3, r3, #18
 80013ae:	4013      	ands	r3, r2
 80013b0:	d1f0      	bne.n	8001394 <HAL_RCC_OscConfig+0x694>
 80013b2:	e024      	b.n	80013fe <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d101      	bne.n	80013c0 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
 80013be:	e01f      	b.n	8001400 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80013c0:	4b11      	ldr	r3, [pc, #68]	; (8001408 <HAL_RCC_OscConfig+0x708>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80013c6:	4b10      	ldr	r3, [pc, #64]	; (8001408 <HAL_RCC_OscConfig+0x708>)
 80013c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ca:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80013cc:	697a      	ldr	r2, [r7, #20]
 80013ce:	23c0      	movs	r3, #192	; 0xc0
 80013d0:	025b      	lsls	r3, r3, #9
 80013d2:	401a      	ands	r2, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d8:	429a      	cmp	r2, r3
 80013da:	d10e      	bne.n	80013fa <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	220f      	movs	r2, #15
 80013e0:	401a      	ands	r2, r3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d107      	bne.n	80013fa <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80013ea:	697a      	ldr	r2, [r7, #20]
 80013ec:	23f0      	movs	r3, #240	; 0xf0
 80013ee:	039b      	lsls	r3, r3, #14
 80013f0:	401a      	ands	r2, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d001      	beq.n	80013fe <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e000      	b.n	8001400 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80013fe:	2300      	movs	r3, #0
}
 8001400:	0018      	movs	r0, r3
 8001402:	46bd      	mov	sp, r7
 8001404:	b008      	add	sp, #32
 8001406:	bd80      	pop	{r7, pc}
 8001408:	40021000 	.word	0x40021000

0800140c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d101      	bne.n	8001420 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	e0bf      	b.n	80015a0 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001420:	4b61      	ldr	r3, [pc, #388]	; (80015a8 <HAL_RCC_ClockConfig+0x19c>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2201      	movs	r2, #1
 8001426:	4013      	ands	r3, r2
 8001428:	683a      	ldr	r2, [r7, #0]
 800142a:	429a      	cmp	r2, r3
 800142c:	d911      	bls.n	8001452 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800142e:	4b5e      	ldr	r3, [pc, #376]	; (80015a8 <HAL_RCC_ClockConfig+0x19c>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	2201      	movs	r2, #1
 8001434:	4393      	bics	r3, r2
 8001436:	0019      	movs	r1, r3
 8001438:	4b5b      	ldr	r3, [pc, #364]	; (80015a8 <HAL_RCC_ClockConfig+0x19c>)
 800143a:	683a      	ldr	r2, [r7, #0]
 800143c:	430a      	orrs	r2, r1
 800143e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001440:	4b59      	ldr	r3, [pc, #356]	; (80015a8 <HAL_RCC_ClockConfig+0x19c>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2201      	movs	r2, #1
 8001446:	4013      	ands	r3, r2
 8001448:	683a      	ldr	r2, [r7, #0]
 800144a:	429a      	cmp	r2, r3
 800144c:	d001      	beq.n	8001452 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e0a6      	b.n	80015a0 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	2202      	movs	r2, #2
 8001458:	4013      	ands	r3, r2
 800145a:	d015      	beq.n	8001488 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2204      	movs	r2, #4
 8001462:	4013      	ands	r3, r2
 8001464:	d006      	beq.n	8001474 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001466:	4b51      	ldr	r3, [pc, #324]	; (80015ac <HAL_RCC_ClockConfig+0x1a0>)
 8001468:	685a      	ldr	r2, [r3, #4]
 800146a:	4b50      	ldr	r3, [pc, #320]	; (80015ac <HAL_RCC_ClockConfig+0x1a0>)
 800146c:	21e0      	movs	r1, #224	; 0xe0
 800146e:	00c9      	lsls	r1, r1, #3
 8001470:	430a      	orrs	r2, r1
 8001472:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001474:	4b4d      	ldr	r3, [pc, #308]	; (80015ac <HAL_RCC_ClockConfig+0x1a0>)
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	22f0      	movs	r2, #240	; 0xf0
 800147a:	4393      	bics	r3, r2
 800147c:	0019      	movs	r1, r3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	689a      	ldr	r2, [r3, #8]
 8001482:	4b4a      	ldr	r3, [pc, #296]	; (80015ac <HAL_RCC_ClockConfig+0x1a0>)
 8001484:	430a      	orrs	r2, r1
 8001486:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2201      	movs	r2, #1
 800148e:	4013      	ands	r3, r2
 8001490:	d04c      	beq.n	800152c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	2b01      	cmp	r3, #1
 8001498:	d107      	bne.n	80014aa <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800149a:	4b44      	ldr	r3, [pc, #272]	; (80015ac <HAL_RCC_ClockConfig+0x1a0>)
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	2380      	movs	r3, #128	; 0x80
 80014a0:	029b      	lsls	r3, r3, #10
 80014a2:	4013      	ands	r3, r2
 80014a4:	d120      	bne.n	80014e8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e07a      	b.n	80015a0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d107      	bne.n	80014c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014b2:	4b3e      	ldr	r3, [pc, #248]	; (80015ac <HAL_RCC_ClockConfig+0x1a0>)
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	2380      	movs	r3, #128	; 0x80
 80014b8:	049b      	lsls	r3, r3, #18
 80014ba:	4013      	ands	r3, r2
 80014bc:	d114      	bne.n	80014e8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e06e      	b.n	80015a0 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	2b03      	cmp	r3, #3
 80014c8:	d107      	bne.n	80014da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80014ca:	4b38      	ldr	r3, [pc, #224]	; (80015ac <HAL_RCC_ClockConfig+0x1a0>)
 80014cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014ce:	2380      	movs	r3, #128	; 0x80
 80014d0:	025b      	lsls	r3, r3, #9
 80014d2:	4013      	ands	r3, r2
 80014d4:	d108      	bne.n	80014e8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e062      	b.n	80015a0 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014da:	4b34      	ldr	r3, [pc, #208]	; (80015ac <HAL_RCC_ClockConfig+0x1a0>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2202      	movs	r2, #2
 80014e0:	4013      	ands	r3, r2
 80014e2:	d101      	bne.n	80014e8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	e05b      	b.n	80015a0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014e8:	4b30      	ldr	r3, [pc, #192]	; (80015ac <HAL_RCC_ClockConfig+0x1a0>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	2203      	movs	r2, #3
 80014ee:	4393      	bics	r3, r2
 80014f0:	0019      	movs	r1, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	685a      	ldr	r2, [r3, #4]
 80014f6:	4b2d      	ldr	r3, [pc, #180]	; (80015ac <HAL_RCC_ClockConfig+0x1a0>)
 80014f8:	430a      	orrs	r2, r1
 80014fa:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014fc:	f7ff f8cc 	bl	8000698 <HAL_GetTick>
 8001500:	0003      	movs	r3, r0
 8001502:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001504:	e009      	b.n	800151a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001506:	f7ff f8c7 	bl	8000698 <HAL_GetTick>
 800150a:	0002      	movs	r2, r0
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	4a27      	ldr	r2, [pc, #156]	; (80015b0 <HAL_RCC_ClockConfig+0x1a4>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d901      	bls.n	800151a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e042      	b.n	80015a0 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800151a:	4b24      	ldr	r3, [pc, #144]	; (80015ac <HAL_RCC_ClockConfig+0x1a0>)
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	220c      	movs	r2, #12
 8001520:	401a      	ands	r2, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	429a      	cmp	r2, r3
 800152a:	d1ec      	bne.n	8001506 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800152c:	4b1e      	ldr	r3, [pc, #120]	; (80015a8 <HAL_RCC_ClockConfig+0x19c>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2201      	movs	r2, #1
 8001532:	4013      	ands	r3, r2
 8001534:	683a      	ldr	r2, [r7, #0]
 8001536:	429a      	cmp	r2, r3
 8001538:	d211      	bcs.n	800155e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800153a:	4b1b      	ldr	r3, [pc, #108]	; (80015a8 <HAL_RCC_ClockConfig+0x19c>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2201      	movs	r2, #1
 8001540:	4393      	bics	r3, r2
 8001542:	0019      	movs	r1, r3
 8001544:	4b18      	ldr	r3, [pc, #96]	; (80015a8 <HAL_RCC_ClockConfig+0x19c>)
 8001546:	683a      	ldr	r2, [r7, #0]
 8001548:	430a      	orrs	r2, r1
 800154a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800154c:	4b16      	ldr	r3, [pc, #88]	; (80015a8 <HAL_RCC_ClockConfig+0x19c>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2201      	movs	r2, #1
 8001552:	4013      	ands	r3, r2
 8001554:	683a      	ldr	r2, [r7, #0]
 8001556:	429a      	cmp	r2, r3
 8001558:	d001      	beq.n	800155e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e020      	b.n	80015a0 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	2204      	movs	r2, #4
 8001564:	4013      	ands	r3, r2
 8001566:	d009      	beq.n	800157c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001568:	4b10      	ldr	r3, [pc, #64]	; (80015ac <HAL_RCC_ClockConfig+0x1a0>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	4a11      	ldr	r2, [pc, #68]	; (80015b4 <HAL_RCC_ClockConfig+0x1a8>)
 800156e:	4013      	ands	r3, r2
 8001570:	0019      	movs	r1, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	68da      	ldr	r2, [r3, #12]
 8001576:	4b0d      	ldr	r3, [pc, #52]	; (80015ac <HAL_RCC_ClockConfig+0x1a0>)
 8001578:	430a      	orrs	r2, r1
 800157a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800157c:	f000 f820 	bl	80015c0 <HAL_RCC_GetSysClockFreq>
 8001580:	0001      	movs	r1, r0
 8001582:	4b0a      	ldr	r3, [pc, #40]	; (80015ac <HAL_RCC_ClockConfig+0x1a0>)
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	091b      	lsrs	r3, r3, #4
 8001588:	220f      	movs	r2, #15
 800158a:	4013      	ands	r3, r2
 800158c:	4a0a      	ldr	r2, [pc, #40]	; (80015b8 <HAL_RCC_ClockConfig+0x1ac>)
 800158e:	5cd3      	ldrb	r3, [r2, r3]
 8001590:	000a      	movs	r2, r1
 8001592:	40da      	lsrs	r2, r3
 8001594:	4b09      	ldr	r3, [pc, #36]	; (80015bc <HAL_RCC_ClockConfig+0x1b0>)
 8001596:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001598:	2000      	movs	r0, #0
 800159a:	f7ff f837 	bl	800060c <HAL_InitTick>
  
  return HAL_OK;
 800159e:	2300      	movs	r3, #0
}
 80015a0:	0018      	movs	r0, r3
 80015a2:	46bd      	mov	sp, r7
 80015a4:	b004      	add	sp, #16
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	40022000 	.word	0x40022000
 80015ac:	40021000 	.word	0x40021000
 80015b0:	00001388 	.word	0x00001388
 80015b4:	fffff8ff 	.word	0xfffff8ff
 80015b8:	080028b8 	.word	0x080028b8
 80015bc:	20000030 	.word	0x20000030

080015c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015c0:	b590      	push	{r4, r7, lr}
 80015c2:	b08f      	sub	sp, #60	; 0x3c
 80015c4:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80015c6:	2314      	movs	r3, #20
 80015c8:	18fb      	adds	r3, r7, r3
 80015ca:	4a37      	ldr	r2, [pc, #220]	; (80016a8 <HAL_RCC_GetSysClockFreq+0xe8>)
 80015cc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80015ce:	c313      	stmia	r3!, {r0, r1, r4}
 80015d0:	6812      	ldr	r2, [r2, #0]
 80015d2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80015d4:	1d3b      	adds	r3, r7, #4
 80015d6:	4a35      	ldr	r2, [pc, #212]	; (80016ac <HAL_RCC_GetSysClockFreq+0xec>)
 80015d8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80015da:	c313      	stmia	r3!, {r0, r1, r4}
 80015dc:	6812      	ldr	r2, [r2, #0]
 80015de:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80015e0:	2300      	movs	r3, #0
 80015e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015e4:	2300      	movs	r3, #0
 80015e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80015e8:	2300      	movs	r3, #0
 80015ea:	637b      	str	r3, [r7, #52]	; 0x34
 80015ec:	2300      	movs	r3, #0
 80015ee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80015f0:	2300      	movs	r3, #0
 80015f2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80015f4:	4b2e      	ldr	r3, [pc, #184]	; (80016b0 <HAL_RCC_GetSysClockFreq+0xf0>)
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80015fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015fc:	220c      	movs	r2, #12
 80015fe:	4013      	ands	r3, r2
 8001600:	2b08      	cmp	r3, #8
 8001602:	d006      	beq.n	8001612 <HAL_RCC_GetSysClockFreq+0x52>
 8001604:	2b0c      	cmp	r3, #12
 8001606:	d043      	beq.n	8001690 <HAL_RCC_GetSysClockFreq+0xd0>
 8001608:	2b04      	cmp	r3, #4
 800160a:	d144      	bne.n	8001696 <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800160c:	4b29      	ldr	r3, [pc, #164]	; (80016b4 <HAL_RCC_GetSysClockFreq+0xf4>)
 800160e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001610:	e044      	b.n	800169c <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001614:	0c9b      	lsrs	r3, r3, #18
 8001616:	220f      	movs	r2, #15
 8001618:	4013      	ands	r3, r2
 800161a:	2214      	movs	r2, #20
 800161c:	18ba      	adds	r2, r7, r2
 800161e:	5cd3      	ldrb	r3, [r2, r3]
 8001620:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001622:	4b23      	ldr	r3, [pc, #140]	; (80016b0 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001626:	220f      	movs	r2, #15
 8001628:	4013      	ands	r3, r2
 800162a:	1d3a      	adds	r2, r7, #4
 800162c:	5cd3      	ldrb	r3, [r2, r3]
 800162e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001630:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001632:	23c0      	movs	r3, #192	; 0xc0
 8001634:	025b      	lsls	r3, r3, #9
 8001636:	401a      	ands	r2, r3
 8001638:	2380      	movs	r3, #128	; 0x80
 800163a:	025b      	lsls	r3, r3, #9
 800163c:	429a      	cmp	r2, r3
 800163e:	d109      	bne.n	8001654 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001640:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001642:	481c      	ldr	r0, [pc, #112]	; (80016b4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001644:	f7fe fd60 	bl	8000108 <__udivsi3>
 8001648:	0003      	movs	r3, r0
 800164a:	001a      	movs	r2, r3
 800164c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164e:	4353      	muls	r3, r2
 8001650:	637b      	str	r3, [r7, #52]	; 0x34
 8001652:	e01a      	b.n	800168a <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001654:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001656:	23c0      	movs	r3, #192	; 0xc0
 8001658:	025b      	lsls	r3, r3, #9
 800165a:	401a      	ands	r2, r3
 800165c:	23c0      	movs	r3, #192	; 0xc0
 800165e:	025b      	lsls	r3, r3, #9
 8001660:	429a      	cmp	r2, r3
 8001662:	d109      	bne.n	8001678 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001664:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001666:	4814      	ldr	r0, [pc, #80]	; (80016b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001668:	f7fe fd4e 	bl	8000108 <__udivsi3>
 800166c:	0003      	movs	r3, r0
 800166e:	001a      	movs	r2, r3
 8001670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001672:	4353      	muls	r3, r2
 8001674:	637b      	str	r3, [r7, #52]	; 0x34
 8001676:	e008      	b.n	800168a <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001678:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800167a:	480e      	ldr	r0, [pc, #56]	; (80016b4 <HAL_RCC_GetSysClockFreq+0xf4>)
 800167c:	f7fe fd44 	bl	8000108 <__udivsi3>
 8001680:	0003      	movs	r3, r0
 8001682:	001a      	movs	r2, r3
 8001684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001686:	4353      	muls	r3, r2
 8001688:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800168a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800168c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800168e:	e005      	b.n	800169c <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001690:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001692:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001694:	e002      	b.n	800169c <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001696:	4b07      	ldr	r3, [pc, #28]	; (80016b4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001698:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800169a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800169c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800169e:	0018      	movs	r0, r3
 80016a0:	46bd      	mov	sp, r7
 80016a2:	b00f      	add	sp, #60	; 0x3c
 80016a4:	bd90      	pop	{r4, r7, pc}
 80016a6:	46c0      	nop			; (mov r8, r8)
 80016a8:	08002898 	.word	0x08002898
 80016ac:	080028a8 	.word	0x080028a8
 80016b0:	40021000 	.word	0x40021000
 80016b4:	007a1200 	.word	0x007a1200
 80016b8:	02dc6c00 	.word	0x02dc6c00

080016bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016c0:	4b02      	ldr	r3, [pc, #8]	; (80016cc <HAL_RCC_GetHCLKFreq+0x10>)
 80016c2:	681b      	ldr	r3, [r3, #0]
}
 80016c4:	0018      	movs	r0, r3
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	46c0      	nop			; (mov r8, r8)
 80016cc:	20000030 	.word	0x20000030

080016d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80016d4:	f7ff fff2 	bl	80016bc <HAL_RCC_GetHCLKFreq>
 80016d8:	0001      	movs	r1, r0
 80016da:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	0a1b      	lsrs	r3, r3, #8
 80016e0:	2207      	movs	r2, #7
 80016e2:	4013      	ands	r3, r2
 80016e4:	4a04      	ldr	r2, [pc, #16]	; (80016f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80016e6:	5cd3      	ldrb	r3, [r2, r3]
 80016e8:	40d9      	lsrs	r1, r3
 80016ea:	000b      	movs	r3, r1
}    
 80016ec:	0018      	movs	r0, r3
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	46c0      	nop			; (mov r8, r8)
 80016f4:	40021000 	.word	0x40021000
 80016f8:	080028c8 	.word	0x080028c8

080016fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d101      	bne.n	800170e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e044      	b.n	8001798 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001712:	2b00      	cmp	r3, #0
 8001714:	d107      	bne.n	8001726 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2274      	movs	r2, #116	; 0x74
 800171a:	2100      	movs	r1, #0
 800171c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	0018      	movs	r0, r3
 8001722:	f7fe feb5 	bl	8000490 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2224      	movs	r2, #36	; 0x24
 800172a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	2101      	movs	r1, #1
 8001738:	438a      	bics	r2, r1
 800173a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	0018      	movs	r0, r3
 8001740:	f000 fb1a 	bl	8001d78 <UART_SetConfig>
 8001744:	0003      	movs	r3, r0
 8001746:	2b01      	cmp	r3, #1
 8001748:	d101      	bne.n	800174e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e024      	b.n	8001798 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001752:	2b00      	cmp	r3, #0
 8001754:	d003      	beq.n	800175e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	0018      	movs	r0, r3
 800175a:	f000 fc91 	bl	8002080 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	685a      	ldr	r2, [r3, #4]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	490d      	ldr	r1, [pc, #52]	; (80017a0 <HAL_UART_Init+0xa4>)
 800176a:	400a      	ands	r2, r1
 800176c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	689a      	ldr	r2, [r3, #8]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	212a      	movs	r1, #42	; 0x2a
 800177a:	438a      	bics	r2, r1
 800177c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2101      	movs	r1, #1
 800178a:	430a      	orrs	r2, r1
 800178c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	0018      	movs	r0, r3
 8001792:	f000 fd29 	bl	80021e8 <UART_CheckIdleState>
 8001796:	0003      	movs	r3, r0
}
 8001798:	0018      	movs	r0, r3
 800179a:	46bd      	mov	sp, r7
 800179c:	b002      	add	sp, #8
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	ffffb7ff 	.word	0xffffb7ff

080017a4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	60f8      	str	r0, [r7, #12]
 80017ac:	60b9      	str	r1, [r7, #8]
 80017ae:	1dbb      	adds	r3, r7, #6
 80017b0:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80017b6:	2b20      	cmp	r3, #32
 80017b8:	d159      	bne.n	800186e <HAL_UART_Transmit_IT+0xca>
  {
    if ((pData == NULL) || (Size == 0U))
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d003      	beq.n	80017c8 <HAL_UART_Transmit_IT+0x24>
 80017c0:	1dbb      	adds	r3, r7, #6
 80017c2:	881b      	ldrh	r3, [r3, #0]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d101      	bne.n	80017cc <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e051      	b.n	8001870 <HAL_UART_Transmit_IT+0xcc>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	689a      	ldr	r2, [r3, #8]
 80017d0:	2380      	movs	r3, #128	; 0x80
 80017d2:	015b      	lsls	r3, r3, #5
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d109      	bne.n	80017ec <HAL_UART_Transmit_IT+0x48>
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	691b      	ldr	r3, [r3, #16]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d105      	bne.n	80017ec <HAL_UART_Transmit_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	2201      	movs	r2, #1
 80017e4:	4013      	ands	r3, r2
 80017e6:	d001      	beq.n	80017ec <HAL_UART_Transmit_IT+0x48>
      {
        return  HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e041      	b.n	8001870 <HAL_UART_Transmit_IT+0xcc>
      }
    }

    __HAL_LOCK(huart);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2274      	movs	r2, #116	; 0x74
 80017f0:	5c9b      	ldrb	r3, [r3, r2]
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d101      	bne.n	80017fa <HAL_UART_Transmit_IT+0x56>
 80017f6:	2302      	movs	r3, #2
 80017f8:	e03a      	b.n	8001870 <HAL_UART_Transmit_IT+0xcc>
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	2274      	movs	r2, #116	; 0x74
 80017fe:	2101      	movs	r1, #1
 8001800:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	68ba      	ldr	r2, [r7, #8]
 8001806:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	1dba      	adds	r2, r7, #6
 800180c:	2150      	movs	r1, #80	; 0x50
 800180e:	8812      	ldrh	r2, [r2, #0]
 8001810:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	1dba      	adds	r2, r7, #6
 8001816:	2152      	movs	r1, #82	; 0x52
 8001818:	8812      	ldrh	r2, [r2, #0]
 800181a:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	2200      	movs	r2, #0
 8001820:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	2280      	movs	r2, #128	; 0x80
 8001826:	2100      	movs	r1, #0
 8001828:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	2221      	movs	r2, #33	; 0x21
 800182e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	689a      	ldr	r2, [r3, #8]
 8001834:	2380      	movs	r3, #128	; 0x80
 8001836:	015b      	lsls	r3, r3, #5
 8001838:	429a      	cmp	r2, r3
 800183a:	d107      	bne.n	800184c <HAL_UART_Transmit_IT+0xa8>
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	691b      	ldr	r3, [r3, #16]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d103      	bne.n	800184c <HAL_UART_Transmit_IT+0xa8>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	4a0c      	ldr	r2, [pc, #48]	; (8001878 <HAL_UART_Transmit_IT+0xd4>)
 8001848:	669a      	str	r2, [r3, #104]	; 0x68
 800184a:	e002      	b.n	8001852 <HAL_UART_Transmit_IT+0xae>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	4a0b      	ldr	r2, [pc, #44]	; (800187c <HAL_UART_Transmit_IT+0xd8>)
 8001850:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	2274      	movs	r2, #116	; 0x74
 8001856:	2100      	movs	r1, #0
 8001858:	5499      	strb	r1, [r3, r2]

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2180      	movs	r1, #128	; 0x80
 8001866:	430a      	orrs	r2, r1
 8001868:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800186a:	2300      	movs	r3, #0
 800186c:	e000      	b.n	8001870 <HAL_UART_Transmit_IT+0xcc>
  }
  else
  {
    return HAL_BUSY;
 800186e:	2302      	movs	r3, #2
  }
}
 8001870:	0018      	movs	r0, r3
 8001872:	46bd      	mov	sp, r7
 8001874:	b004      	add	sp, #16
 8001876:	bd80      	pop	{r7, pc}
 8001878:	08002593 	.word	0x08002593
 800187c:	08002523 	.word	0x08002523

08001880 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	60b9      	str	r1, [r7, #8]
 800188a:	1dbb      	adds	r3, r7, #6
 800188c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001892:	2b20      	cmp	r3, #32
 8001894:	d13f      	bne.n	8001916 <HAL_UART_Receive_IT+0x96>
  {
    if ((pData == NULL) || (Size == 0U))
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d003      	beq.n	80018a4 <HAL_UART_Receive_IT+0x24>
 800189c:	1dbb      	adds	r3, r7, #6
 800189e:	881b      	ldrh	r3, [r3, #0]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d101      	bne.n	80018a8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e037      	b.n	8001918 <HAL_UART_Receive_IT+0x98>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	689a      	ldr	r2, [r3, #8]
 80018ac:	2380      	movs	r3, #128	; 0x80
 80018ae:	015b      	lsls	r3, r3, #5
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d109      	bne.n	80018c8 <HAL_UART_Receive_IT+0x48>
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	691b      	ldr	r3, [r3, #16]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d105      	bne.n	80018c8 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	2201      	movs	r2, #1
 80018c0:	4013      	ands	r3, r2
 80018c2:	d001      	beq.n	80018c8 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e027      	b.n	8001918 <HAL_UART_Receive_IT+0x98>
      }
    }

    __HAL_LOCK(huart);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	2274      	movs	r2, #116	; 0x74
 80018cc:	5c9b      	ldrb	r3, [r3, r2]
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d101      	bne.n	80018d6 <HAL_UART_Receive_IT+0x56>
 80018d2:	2302      	movs	r3, #2
 80018d4:	e020      	b.n	8001918 <HAL_UART_Receive_IT+0x98>
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2274      	movs	r2, #116	; 0x74
 80018da:	2101      	movs	r1, #1
 80018dc:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	2200      	movs	r2, #0
 80018e2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	685a      	ldr	r2, [r3, #4]
 80018ea:	2380      	movs	r3, #128	; 0x80
 80018ec:	041b      	lsls	r3, r3, #16
 80018ee:	4013      	ands	r3, r2
 80018f0:	d008      	beq.n	8001904 <HAL_UART_Receive_IT+0x84>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2180      	movs	r1, #128	; 0x80
 80018fe:	04c9      	lsls	r1, r1, #19
 8001900:	430a      	orrs	r2, r1
 8001902:	601a      	str	r2, [r3, #0]
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8001904:	1dbb      	adds	r3, r7, #6
 8001906:	881a      	ldrh	r2, [r3, #0]
 8001908:	68b9      	ldr	r1, [r7, #8]
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	0018      	movs	r0, r3
 800190e:	f000 fd33 	bl	8002378 <UART_Start_Receive_IT>
 8001912:	0003      	movs	r3, r0
 8001914:	e000      	b.n	8001918 <HAL_UART_Receive_IT+0x98>
  }
  else
  {
    return HAL_BUSY;
 8001916:	2302      	movs	r3, #2
  }
}
 8001918:	0018      	movs	r0, r3
 800191a:	46bd      	mov	sp, r7
 800191c:	b004      	add	sp, #16
 800191e:	bd80      	pop	{r7, pc}

08001920 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b088      	sub	sp, #32
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	69db      	ldr	r3, [r3, #28]
 800192e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	4ab5      	ldr	r2, [pc, #724]	; (8001c18 <HAL_UART_IRQHandler+0x2f8>)
 8001944:	4013      	ands	r3, r2
 8001946:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d112      	bne.n	8001974 <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	2220      	movs	r2, #32
 8001952:	4013      	ands	r3, r2
 8001954:	d00e      	beq.n	8001974 <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	2220      	movs	r2, #32
 800195a:	4013      	ands	r3, r2
 800195c:	d00a      	beq.n	8001974 <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001962:	2b00      	cmp	r3, #0
 8001964:	d100      	bne.n	8001968 <HAL_UART_IRQHandler+0x48>
 8001966:	e1d4      	b.n	8001d12 <HAL_UART_IRQHandler+0x3f2>
      {
        huart->RxISR(huart);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	0010      	movs	r0, r2
 8001970:	4798      	blx	r3
      }
      return;
 8001972:	e1ce      	b.n	8001d12 <HAL_UART_IRQHandler+0x3f2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d100      	bne.n	800197c <HAL_UART_IRQHandler+0x5c>
 800197a:	e0d9      	b.n	8001b30 <HAL_UART_IRQHandler+0x210>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	2201      	movs	r2, #1
 8001980:	4013      	ands	r3, r2
 8001982:	d104      	bne.n	800198e <HAL_UART_IRQHandler+0x6e>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	4aa5      	ldr	r2, [pc, #660]	; (8001c1c <HAL_UART_IRQHandler+0x2fc>)
 8001988:	4013      	ands	r3, r2
 800198a:	d100      	bne.n	800198e <HAL_UART_IRQHandler+0x6e>
 800198c:	e0d0      	b.n	8001b30 <HAL_UART_IRQHandler+0x210>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	2201      	movs	r2, #1
 8001992:	4013      	ands	r3, r2
 8001994:	d010      	beq.n	80019b8 <HAL_UART_IRQHandler+0x98>
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	2380      	movs	r3, #128	; 0x80
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	4013      	ands	r3, r2
 800199e:	d00b      	beq.n	80019b8 <HAL_UART_IRQHandler+0x98>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2201      	movs	r2, #1
 80019a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2280      	movs	r2, #128	; 0x80
 80019ac:	589b      	ldr	r3, [r3, r2]
 80019ae:	2201      	movs	r2, #1
 80019b0:	431a      	orrs	r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2180      	movs	r1, #128	; 0x80
 80019b6:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	2202      	movs	r2, #2
 80019bc:	4013      	ands	r3, r2
 80019be:	d00f      	beq.n	80019e0 <HAL_UART_IRQHandler+0xc0>
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	2201      	movs	r2, #1
 80019c4:	4013      	ands	r3, r2
 80019c6:	d00b      	beq.n	80019e0 <HAL_UART_IRQHandler+0xc0>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2202      	movs	r2, #2
 80019ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2280      	movs	r2, #128	; 0x80
 80019d4:	589b      	ldr	r3, [r3, r2]
 80019d6:	2204      	movs	r2, #4
 80019d8:	431a      	orrs	r2, r3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2180      	movs	r1, #128	; 0x80
 80019de:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	2204      	movs	r2, #4
 80019e4:	4013      	ands	r3, r2
 80019e6:	d00f      	beq.n	8001a08 <HAL_UART_IRQHandler+0xe8>
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	2201      	movs	r2, #1
 80019ec:	4013      	ands	r3, r2
 80019ee:	d00b      	beq.n	8001a08 <HAL_UART_IRQHandler+0xe8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2204      	movs	r2, #4
 80019f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2280      	movs	r2, #128	; 0x80
 80019fc:	589b      	ldr	r3, [r3, r2]
 80019fe:	2202      	movs	r2, #2
 8001a00:	431a      	orrs	r2, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2180      	movs	r1, #128	; 0x80
 8001a06:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	2208      	movs	r2, #8
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	d013      	beq.n	8001a38 <HAL_UART_IRQHandler+0x118>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	2220      	movs	r2, #32
 8001a14:	4013      	ands	r3, r2
 8001a16:	d103      	bne.n	8001a20 <HAL_UART_IRQHandler+0x100>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001a1e:	d00b      	beq.n	8001a38 <HAL_UART_IRQHandler+0x118>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2208      	movs	r2, #8
 8001a26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2280      	movs	r2, #128	; 0x80
 8001a2c:	589b      	ldr	r3, [r3, r2]
 8001a2e:	2208      	movs	r2, #8
 8001a30:	431a      	orrs	r2, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2180      	movs	r1, #128	; 0x80
 8001a36:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8001a38:	69fa      	ldr	r2, [r7, #28]
 8001a3a:	2380      	movs	r3, #128	; 0x80
 8001a3c:	011b      	lsls	r3, r3, #4
 8001a3e:	4013      	ands	r3, r2
 8001a40:	d011      	beq.n	8001a66 <HAL_UART_IRQHandler+0x146>
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	2380      	movs	r3, #128	; 0x80
 8001a46:	04db      	lsls	r3, r3, #19
 8001a48:	4013      	ands	r3, r2
 8001a4a:	d00c      	beq.n	8001a66 <HAL_UART_IRQHandler+0x146>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2280      	movs	r2, #128	; 0x80
 8001a52:	0112      	lsls	r2, r2, #4
 8001a54:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2280      	movs	r2, #128	; 0x80
 8001a5a:	589b      	ldr	r3, [r3, r2]
 8001a5c:	2220      	movs	r2, #32
 8001a5e:	431a      	orrs	r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2180      	movs	r1, #128	; 0x80
 8001a64:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2280      	movs	r2, #128	; 0x80
 8001a6a:	589b      	ldr	r3, [r3, r2]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d100      	bne.n	8001a72 <HAL_UART_IRQHandler+0x152>
 8001a70:	e151      	b.n	8001d16 <HAL_UART_IRQHandler+0x3f6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	2220      	movs	r2, #32
 8001a76:	4013      	ands	r3, r2
 8001a78:	d00c      	beq.n	8001a94 <HAL_UART_IRQHandler+0x174>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	2220      	movs	r2, #32
 8001a7e:	4013      	ands	r3, r2
 8001a80:	d008      	beq.n	8001a94 <HAL_UART_IRQHandler+0x174>
      {
        if (huart->RxISR != NULL)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d004      	beq.n	8001a94 <HAL_UART_IRQHandler+0x174>
        {
          huart->RxISR(huart);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	0010      	movs	r0, r2
 8001a92:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2280      	movs	r2, #128	; 0x80
 8001a98:	589b      	ldr	r3, [r3, r2]
 8001a9a:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	2240      	movs	r2, #64	; 0x40
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	2b40      	cmp	r3, #64	; 0x40
 8001aa8:	d003      	beq.n	8001ab2 <HAL_UART_IRQHandler+0x192>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	2228      	movs	r2, #40	; 0x28
 8001aae:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001ab0:	d033      	beq.n	8001b1a <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	0018      	movs	r0, r3
 8001ab6:	f000 fced 	bl	8002494 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	2240      	movs	r2, #64	; 0x40
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	2b40      	cmp	r3, #64	; 0x40
 8001ac6:	d123      	bne.n	8001b10 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	689a      	ldr	r2, [r3, #8]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2140      	movs	r1, #64	; 0x40
 8001ad4:	438a      	bics	r2, r1
 8001ad6:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d012      	beq.n	8001b06 <HAL_UART_IRQHandler+0x1e6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ae4:	4a4e      	ldr	r2, [pc, #312]	; (8001c20 <HAL_UART_IRQHandler+0x300>)
 8001ae6:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aec:	0018      	movs	r0, r3
 8001aee:	f7fe fef3 	bl	80008d8 <HAL_DMA_Abort_IT>
 8001af2:	1e03      	subs	r3, r0, #0
 8001af4:	d01a      	beq.n	8001b2c <HAL_UART_IRQHandler+0x20c>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001afa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b00:	0018      	movs	r0, r3
 8001b02:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b04:	e012      	b.n	8001b2c <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	0018      	movs	r0, r3
 8001b0a:	f000 f921 	bl	8001d50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b0e:	e00d      	b.n	8001b2c <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	0018      	movs	r0, r3
 8001b14:	f000 f91c 	bl	8001d50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b18:	e008      	b.n	8001b2c <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	0018      	movs	r0, r3
 8001b1e:	f000 f917 	bl	8001d50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2280      	movs	r2, #128	; 0x80
 8001b26:	2100      	movs	r1, #0
 8001b28:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8001b2a:	e0f4      	b.n	8001d16 <HAL_UART_IRQHandler+0x3f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b2c:	46c0      	nop			; (mov r8, r8)
    return;
 8001b2e:	e0f2      	b.n	8001d16 <HAL_UART_IRQHandler+0x3f6>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d000      	beq.n	8001b3a <HAL_UART_IRQHandler+0x21a>
 8001b38:	e0b7      	b.n	8001caa <HAL_UART_IRQHandler+0x38a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	2210      	movs	r2, #16
 8001b3e:	4013      	ands	r3, r2
 8001b40:	d100      	bne.n	8001b44 <HAL_UART_IRQHandler+0x224>
 8001b42:	e0b2      	b.n	8001caa <HAL_UART_IRQHandler+0x38a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8001b44:	69bb      	ldr	r3, [r7, #24]
 8001b46:	2210      	movs	r2, #16
 8001b48:	4013      	ands	r3, r2
 8001b4a:	d100      	bne.n	8001b4e <HAL_UART_IRQHandler+0x22e>
 8001b4c:	e0ad      	b.n	8001caa <HAL_UART_IRQHandler+0x38a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2210      	movs	r2, #16
 8001b54:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	2240      	movs	r2, #64	; 0x40
 8001b5e:	4013      	ands	r3, r2
 8001b60:	2b40      	cmp	r3, #64	; 0x40
 8001b62:	d161      	bne.n	8001c28 <HAL_UART_IRQHandler+0x308>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	685a      	ldr	r2, [r3, #4]
 8001b6c:	2108      	movs	r1, #8
 8001b6e:	187b      	adds	r3, r7, r1
 8001b70:	801a      	strh	r2, [r3, #0]
      if (  (nb_remaining_rx_data > 0U)
 8001b72:	187b      	adds	r3, r7, r1
 8001b74:	881b      	ldrh	r3, [r3, #0]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d100      	bne.n	8001b7c <HAL_UART_IRQHandler+0x25c>
 8001b7a:	e0ce      	b.n	8001d1a <HAL_UART_IRQHandler+0x3fa>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2258      	movs	r2, #88	; 0x58
 8001b80:	5a9b      	ldrh	r3, [r3, r2]
 8001b82:	2208      	movs	r2, #8
 8001b84:	18ba      	adds	r2, r7, r2
 8001b86:	8812      	ldrh	r2, [r2, #0]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d300      	bcc.n	8001b8e <HAL_UART_IRQHandler+0x26e>
 8001b8c:	e0c5      	b.n	8001d1a <HAL_UART_IRQHandler+0x3fa>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2208      	movs	r2, #8
 8001b92:	18ba      	adds	r2, r7, r2
 8001b94:	215a      	movs	r1, #90	; 0x5a
 8001b96:	8812      	ldrh	r2, [r2, #0]
 8001b98:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b9e:	699b      	ldr	r3, [r3, #24]
 8001ba0:	2b20      	cmp	r3, #32
 8001ba2:	d02a      	beq.n	8001bfa <HAL_UART_IRQHandler+0x2da>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	491d      	ldr	r1, [pc, #116]	; (8001c24 <HAL_UART_IRQHandler+0x304>)
 8001bb0:	400a      	ands	r2, r1
 8001bb2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	689a      	ldr	r2, [r3, #8]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2101      	movs	r1, #1
 8001bc0:	438a      	bics	r2, r1
 8001bc2:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	689a      	ldr	r2, [r3, #8]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2140      	movs	r1, #64	; 0x40
 8001bd0:	438a      	bics	r2, r1
 8001bd2:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2220      	movs	r2, #32
 8001bd8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	2110      	movs	r1, #16
 8001bec:	438a      	bics	r2, r1
 8001bee:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bf4:	0018      	movs	r0, r3
 8001bf6:	f7fe fe37 	bl	8000868 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2258      	movs	r2, #88	; 0x58
 8001bfe:	5a9a      	ldrh	r2, [r3, r2]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	215a      	movs	r1, #90	; 0x5a
 8001c04:	5a5b      	ldrh	r3, [r3, r1]
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	b29a      	uxth	r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	0011      	movs	r1, r2
 8001c10:	0018      	movs	r0, r3
 8001c12:	f000 f8a5 	bl	8001d60 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8001c16:	e080      	b.n	8001d1a <HAL_UART_IRQHandler+0x3fa>
 8001c18:	0000080f 	.word	0x0000080f
 8001c1c:	04000120 	.word	0x04000120
 8001c20:	080024f5 	.word	0x080024f5
 8001c24:	fffffeff 	.word	0xfffffeff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2258      	movs	r2, #88	; 0x58
 8001c2c:	5a99      	ldrh	r1, [r3, r2]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	225a      	movs	r2, #90	; 0x5a
 8001c32:	5a9b      	ldrh	r3, [r3, r2]
 8001c34:	b29a      	uxth	r2, r3
 8001c36:	230a      	movs	r3, #10
 8001c38:	18fb      	adds	r3, r7, r3
 8001c3a:	1a8a      	subs	r2, r1, r2
 8001c3c:	801a      	strh	r2, [r3, #0]
      if (  (huart->RxXferCount > 0U)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	225a      	movs	r2, #90	; 0x5a
 8001c42:	5a9b      	ldrh	r3, [r3, r2]
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d100      	bne.n	8001c4c <HAL_UART_IRQHandler+0x32c>
 8001c4a:	e068      	b.n	8001d1e <HAL_UART_IRQHandler+0x3fe>
          &&(nb_rx_data > 0U) )
 8001c4c:	230a      	movs	r3, #10
 8001c4e:	18fb      	adds	r3, r7, r3
 8001c50:	881b      	ldrh	r3, [r3, #0]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d063      	beq.n	8001d1e <HAL_UART_IRQHandler+0x3fe>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4932      	ldr	r1, [pc, #200]	; (8001d2c <HAL_UART_IRQHandler+0x40c>)
 8001c62:	400a      	ands	r2, r1
 8001c64:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	689a      	ldr	r2, [r3, #8]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2101      	movs	r1, #1
 8001c72:	438a      	bics	r2, r1
 8001c74:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2220      	movs	r2, #32
 8001c7a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2110      	movs	r1, #16
 8001c94:	438a      	bics	r2, r1
 8001c96:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001c98:	230a      	movs	r3, #10
 8001c9a:	18fb      	adds	r3, r7, r3
 8001c9c:	881a      	ldrh	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	0011      	movs	r1, r2
 8001ca2:	0018      	movs	r0, r3
 8001ca4:	f000 f85c 	bl	8001d60 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8001ca8:	e039      	b.n	8001d1e <HAL_UART_IRQHandler+0x3fe>
    }
  }
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8001caa:	69fa      	ldr	r2, [r7, #28]
 8001cac:	2380      	movs	r3, #128	; 0x80
 8001cae:	035b      	lsls	r3, r3, #13
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	d00e      	beq.n	8001cd2 <HAL_UART_IRQHandler+0x3b2>
 8001cb4:	697a      	ldr	r2, [r7, #20]
 8001cb6:	2380      	movs	r3, #128	; 0x80
 8001cb8:	03db      	lsls	r3, r3, #15
 8001cba:	4013      	ands	r3, r2
 8001cbc:	d009      	beq.n	8001cd2 <HAL_UART_IRQHandler+0x3b2>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2280      	movs	r2, #128	; 0x80
 8001cc4:	0352      	lsls	r2, r2, #13
 8001cc6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	0018      	movs	r0, r3
 8001ccc:	f000 fda4 	bl	8002818 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8001cd0:	e028      	b.n	8001d24 <HAL_UART_IRQHandler+0x404>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	2280      	movs	r2, #128	; 0x80
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	d00d      	beq.n	8001cf6 <HAL_UART_IRQHandler+0x3d6>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	2280      	movs	r2, #128	; 0x80
 8001cde:	4013      	ands	r3, r2
 8001ce0:	d009      	beq.n	8001cf6 <HAL_UART_IRQHandler+0x3d6>
  {
    if (huart->TxISR != NULL)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d01b      	beq.n	8001d22 <HAL_UART_IRQHandler+0x402>
    {
      huart->TxISR(huart);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	0010      	movs	r0, r2
 8001cf2:	4798      	blx	r3
    }
    return;
 8001cf4:	e015      	b.n	8001d22 <HAL_UART_IRQHandler+0x402>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	2240      	movs	r2, #64	; 0x40
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	d012      	beq.n	8001d24 <HAL_UART_IRQHandler+0x404>
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	2240      	movs	r2, #64	; 0x40
 8001d02:	4013      	ands	r3, r2
 8001d04:	d00e      	beq.n	8001d24 <HAL_UART_IRQHandler+0x404>
  {
    UART_EndTransmit_IT(huart);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	0018      	movs	r0, r3
 8001d0a:	f000 fc7e 	bl	800260a <UART_EndTransmit_IT>
    return;
 8001d0e:	46c0      	nop			; (mov r8, r8)
 8001d10:	e008      	b.n	8001d24 <HAL_UART_IRQHandler+0x404>
      return;
 8001d12:	46c0      	nop			; (mov r8, r8)
 8001d14:	e006      	b.n	8001d24 <HAL_UART_IRQHandler+0x404>
    return;
 8001d16:	46c0      	nop			; (mov r8, r8)
 8001d18:	e004      	b.n	8001d24 <HAL_UART_IRQHandler+0x404>
      return;
 8001d1a:	46c0      	nop			; (mov r8, r8)
 8001d1c:	e002      	b.n	8001d24 <HAL_UART_IRQHandler+0x404>
      return;
 8001d1e:	46c0      	nop			; (mov r8, r8)
 8001d20:	e000      	b.n	8001d24 <HAL_UART_IRQHandler+0x404>
    return;
 8001d22:	46c0      	nop			; (mov r8, r8)
  }

}
 8001d24:	46bd      	mov	sp, r7
 8001d26:	b008      	add	sp, #32
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	46c0      	nop			; (mov r8, r8)
 8001d2c:	fffffedf 	.word	0xfffffedf

08001d30 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8001d38:	46c0      	nop			; (mov r8, r8)
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	b002      	add	sp, #8
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8001d48:	46c0      	nop			; (mov r8, r8)
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	b002      	add	sp, #8
 8001d4e:	bd80      	pop	{r7, pc}

08001d50 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8001d58:	46c0      	nop			; (mov r8, r8)
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	b002      	add	sp, #8
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	000a      	movs	r2, r1
 8001d6a:	1cbb      	adds	r3, r7, #2
 8001d6c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001d6e:	46c0      	nop			; (mov r8, r8)
 8001d70:	46bd      	mov	sp, r7
 8001d72:	b002      	add	sp, #8
 8001d74:	bd80      	pop	{r7, pc}
	...

08001d78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b088      	sub	sp, #32
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001d80:	231e      	movs	r3, #30
 8001d82:	18fb      	adds	r3, r7, r3
 8001d84:	2200      	movs	r2, #0
 8001d86:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	689a      	ldr	r2, [r3, #8]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	691b      	ldr	r3, [r3, #16]
 8001d90:	431a      	orrs	r2, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	695b      	ldr	r3, [r3, #20]
 8001d96:	431a      	orrs	r2, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	69db      	ldr	r3, [r3, #28]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4aac      	ldr	r2, [pc, #688]	; (8002058 <UART_SetConfig+0x2e0>)
 8001da8:	4013      	ands	r3, r2
 8001daa:	0019      	movs	r1, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	697a      	ldr	r2, [r7, #20]
 8001db2:	430a      	orrs	r2, r1
 8001db4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	4aa7      	ldr	r2, [pc, #668]	; (800205c <UART_SetConfig+0x2e4>)
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	0019      	movs	r1, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	68da      	ldr	r2, [r3, #12]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	430a      	orrs	r2, r1
 8001dcc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	699b      	ldr	r3, [r3, #24]
 8001dd2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6a1b      	ldr	r3, [r3, #32]
 8001dd8:	697a      	ldr	r2, [r7, #20]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	4a9e      	ldr	r2, [pc, #632]	; (8002060 <UART_SetConfig+0x2e8>)
 8001de6:	4013      	ands	r3, r2
 8001de8:	0019      	movs	r1, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	697a      	ldr	r2, [r7, #20]
 8001df0:	430a      	orrs	r2, r1
 8001df2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a9a      	ldr	r2, [pc, #616]	; (8002064 <UART_SetConfig+0x2ec>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d125      	bne.n	8001e4a <UART_SetConfig+0xd2>
 8001dfe:	4b9a      	ldr	r3, [pc, #616]	; (8002068 <UART_SetConfig+0x2f0>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e02:	2203      	movs	r2, #3
 8001e04:	4013      	ands	r3, r2
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d00f      	beq.n	8001e2a <UART_SetConfig+0xb2>
 8001e0a:	d304      	bcc.n	8001e16 <UART_SetConfig+0x9e>
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d011      	beq.n	8001e34 <UART_SetConfig+0xbc>
 8001e10:	2b03      	cmp	r3, #3
 8001e12:	d005      	beq.n	8001e20 <UART_SetConfig+0xa8>
 8001e14:	e013      	b.n	8001e3e <UART_SetConfig+0xc6>
 8001e16:	231f      	movs	r3, #31
 8001e18:	18fb      	adds	r3, r7, r3
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	701a      	strb	r2, [r3, #0]
 8001e1e:	e064      	b.n	8001eea <UART_SetConfig+0x172>
 8001e20:	231f      	movs	r3, #31
 8001e22:	18fb      	adds	r3, r7, r3
 8001e24:	2202      	movs	r2, #2
 8001e26:	701a      	strb	r2, [r3, #0]
 8001e28:	e05f      	b.n	8001eea <UART_SetConfig+0x172>
 8001e2a:	231f      	movs	r3, #31
 8001e2c:	18fb      	adds	r3, r7, r3
 8001e2e:	2204      	movs	r2, #4
 8001e30:	701a      	strb	r2, [r3, #0]
 8001e32:	e05a      	b.n	8001eea <UART_SetConfig+0x172>
 8001e34:	231f      	movs	r3, #31
 8001e36:	18fb      	adds	r3, r7, r3
 8001e38:	2208      	movs	r2, #8
 8001e3a:	701a      	strb	r2, [r3, #0]
 8001e3c:	e055      	b.n	8001eea <UART_SetConfig+0x172>
 8001e3e:	231f      	movs	r3, #31
 8001e40:	18fb      	adds	r3, r7, r3
 8001e42:	2210      	movs	r2, #16
 8001e44:	701a      	strb	r2, [r3, #0]
 8001e46:	46c0      	nop			; (mov r8, r8)
 8001e48:	e04f      	b.n	8001eea <UART_SetConfig+0x172>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a87      	ldr	r2, [pc, #540]	; (800206c <UART_SetConfig+0x2f4>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d132      	bne.n	8001eba <UART_SetConfig+0x142>
 8001e54:	4b84      	ldr	r3, [pc, #528]	; (8002068 <UART_SetConfig+0x2f0>)
 8001e56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e58:	23c0      	movs	r3, #192	; 0xc0
 8001e5a:	029b      	lsls	r3, r3, #10
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	2280      	movs	r2, #128	; 0x80
 8001e60:	0252      	lsls	r2, r2, #9
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d019      	beq.n	8001e9a <UART_SetConfig+0x122>
 8001e66:	2280      	movs	r2, #128	; 0x80
 8001e68:	0252      	lsls	r2, r2, #9
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d802      	bhi.n	8001e74 <UART_SetConfig+0xfc>
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d009      	beq.n	8001e86 <UART_SetConfig+0x10e>
 8001e72:	e01c      	b.n	8001eae <UART_SetConfig+0x136>
 8001e74:	2280      	movs	r2, #128	; 0x80
 8001e76:	0292      	lsls	r2, r2, #10
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d013      	beq.n	8001ea4 <UART_SetConfig+0x12c>
 8001e7c:	22c0      	movs	r2, #192	; 0xc0
 8001e7e:	0292      	lsls	r2, r2, #10
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d005      	beq.n	8001e90 <UART_SetConfig+0x118>
 8001e84:	e013      	b.n	8001eae <UART_SetConfig+0x136>
 8001e86:	231f      	movs	r3, #31
 8001e88:	18fb      	adds	r3, r7, r3
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	701a      	strb	r2, [r3, #0]
 8001e8e:	e02c      	b.n	8001eea <UART_SetConfig+0x172>
 8001e90:	231f      	movs	r3, #31
 8001e92:	18fb      	adds	r3, r7, r3
 8001e94:	2202      	movs	r2, #2
 8001e96:	701a      	strb	r2, [r3, #0]
 8001e98:	e027      	b.n	8001eea <UART_SetConfig+0x172>
 8001e9a:	231f      	movs	r3, #31
 8001e9c:	18fb      	adds	r3, r7, r3
 8001e9e:	2204      	movs	r2, #4
 8001ea0:	701a      	strb	r2, [r3, #0]
 8001ea2:	e022      	b.n	8001eea <UART_SetConfig+0x172>
 8001ea4:	231f      	movs	r3, #31
 8001ea6:	18fb      	adds	r3, r7, r3
 8001ea8:	2208      	movs	r2, #8
 8001eaa:	701a      	strb	r2, [r3, #0]
 8001eac:	e01d      	b.n	8001eea <UART_SetConfig+0x172>
 8001eae:	231f      	movs	r3, #31
 8001eb0:	18fb      	adds	r3, r7, r3
 8001eb2:	2210      	movs	r2, #16
 8001eb4:	701a      	strb	r2, [r3, #0]
 8001eb6:	46c0      	nop			; (mov r8, r8)
 8001eb8:	e017      	b.n	8001eea <UART_SetConfig+0x172>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a6c      	ldr	r2, [pc, #432]	; (8002070 <UART_SetConfig+0x2f8>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d104      	bne.n	8001ece <UART_SetConfig+0x156>
 8001ec4:	231f      	movs	r3, #31
 8001ec6:	18fb      	adds	r3, r7, r3
 8001ec8:	2200      	movs	r2, #0
 8001eca:	701a      	strb	r2, [r3, #0]
 8001ecc:	e00d      	b.n	8001eea <UART_SetConfig+0x172>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a68      	ldr	r2, [pc, #416]	; (8002074 <UART_SetConfig+0x2fc>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d104      	bne.n	8001ee2 <UART_SetConfig+0x16a>
 8001ed8:	231f      	movs	r3, #31
 8001eda:	18fb      	adds	r3, r7, r3
 8001edc:	2200      	movs	r2, #0
 8001ede:	701a      	strb	r2, [r3, #0]
 8001ee0:	e003      	b.n	8001eea <UART_SetConfig+0x172>
 8001ee2:	231f      	movs	r3, #31
 8001ee4:	18fb      	adds	r3, r7, r3
 8001ee6:	2210      	movs	r2, #16
 8001ee8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	69da      	ldr	r2, [r3, #28]
 8001eee:	2380      	movs	r3, #128	; 0x80
 8001ef0:	021b      	lsls	r3, r3, #8
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d15c      	bne.n	8001fb0 <UART_SetConfig+0x238>
  {
    switch (clocksource)
 8001ef6:	231f      	movs	r3, #31
 8001ef8:	18fb      	adds	r3, r7, r3
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d00d      	beq.n	8001f1c <UART_SetConfig+0x1a4>
 8001f00:	dc02      	bgt.n	8001f08 <UART_SetConfig+0x190>
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d005      	beq.n	8001f12 <UART_SetConfig+0x19a>
 8001f06:	e015      	b.n	8001f34 <UART_SetConfig+0x1bc>
 8001f08:	2b04      	cmp	r3, #4
 8001f0a:	d00a      	beq.n	8001f22 <UART_SetConfig+0x1aa>
 8001f0c:	2b08      	cmp	r3, #8
 8001f0e:	d00d      	beq.n	8001f2c <UART_SetConfig+0x1b4>
 8001f10:	e010      	b.n	8001f34 <UART_SetConfig+0x1bc>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001f12:	f7ff fbdd 	bl	80016d0 <HAL_RCC_GetPCLK1Freq>
 8001f16:	0003      	movs	r3, r0
 8001f18:	61bb      	str	r3, [r7, #24]
        break;
 8001f1a:	e012      	b.n	8001f42 <UART_SetConfig+0x1ca>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001f1c:	4b56      	ldr	r3, [pc, #344]	; (8002078 <UART_SetConfig+0x300>)
 8001f1e:	61bb      	str	r3, [r7, #24]
        break;
 8001f20:	e00f      	b.n	8001f42 <UART_SetConfig+0x1ca>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001f22:	f7ff fb4d 	bl	80015c0 <HAL_RCC_GetSysClockFreq>
 8001f26:	0003      	movs	r3, r0
 8001f28:	61bb      	str	r3, [r7, #24]
        break;
 8001f2a:	e00a      	b.n	8001f42 <UART_SetConfig+0x1ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001f2c:	2380      	movs	r3, #128	; 0x80
 8001f2e:	021b      	lsls	r3, r3, #8
 8001f30:	61bb      	str	r3, [r7, #24]
        break;
 8001f32:	e006      	b.n	8001f42 <UART_SetConfig+0x1ca>
      default:
        pclk = 0U;
 8001f34:	2300      	movs	r3, #0
 8001f36:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001f38:	231e      	movs	r3, #30
 8001f3a:	18fb      	adds	r3, r7, r3
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	701a      	strb	r2, [r3, #0]
        break;
 8001f40:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d100      	bne.n	8001f4a <UART_SetConfig+0x1d2>
 8001f48:	e079      	b.n	800203e <UART_SetConfig+0x2c6>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	005a      	lsls	r2, r3, #1
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	085b      	lsrs	r3, r3, #1
 8001f54:	18d2      	adds	r2, r2, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	0019      	movs	r1, r3
 8001f5c:	0010      	movs	r0, r2
 8001f5e:	f7fe f8d3 	bl	8000108 <__udivsi3>
 8001f62:	0003      	movs	r3, r0
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	2b0f      	cmp	r3, #15
 8001f6c:	d91b      	bls.n	8001fa6 <UART_SetConfig+0x22e>
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	4a42      	ldr	r2, [pc, #264]	; (800207c <UART_SetConfig+0x304>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d817      	bhi.n	8001fa6 <UART_SetConfig+0x22e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	b29a      	uxth	r2, r3
 8001f7a:	200e      	movs	r0, #14
 8001f7c:	183b      	adds	r3, r7, r0
 8001f7e:	210f      	movs	r1, #15
 8001f80:	438a      	bics	r2, r1
 8001f82:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	085b      	lsrs	r3, r3, #1
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	2207      	movs	r2, #7
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	b299      	uxth	r1, r3
 8001f90:	183b      	adds	r3, r7, r0
 8001f92:	183a      	adds	r2, r7, r0
 8001f94:	8812      	ldrh	r2, [r2, #0]
 8001f96:	430a      	orrs	r2, r1
 8001f98:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	183a      	adds	r2, r7, r0
 8001fa0:	8812      	ldrh	r2, [r2, #0]
 8001fa2:	60da      	str	r2, [r3, #12]
 8001fa4:	e04b      	b.n	800203e <UART_SetConfig+0x2c6>
      }
      else
      {
        ret = HAL_ERROR;
 8001fa6:	231e      	movs	r3, #30
 8001fa8:	18fb      	adds	r3, r7, r3
 8001faa:	2201      	movs	r2, #1
 8001fac:	701a      	strb	r2, [r3, #0]
 8001fae:	e046      	b.n	800203e <UART_SetConfig+0x2c6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8001fb0:	231f      	movs	r3, #31
 8001fb2:	18fb      	adds	r3, r7, r3
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d00d      	beq.n	8001fd6 <UART_SetConfig+0x25e>
 8001fba:	dc02      	bgt.n	8001fc2 <UART_SetConfig+0x24a>
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d005      	beq.n	8001fcc <UART_SetConfig+0x254>
 8001fc0:	e015      	b.n	8001fee <UART_SetConfig+0x276>
 8001fc2:	2b04      	cmp	r3, #4
 8001fc4:	d00a      	beq.n	8001fdc <UART_SetConfig+0x264>
 8001fc6:	2b08      	cmp	r3, #8
 8001fc8:	d00d      	beq.n	8001fe6 <UART_SetConfig+0x26e>
 8001fca:	e010      	b.n	8001fee <UART_SetConfig+0x276>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001fcc:	f7ff fb80 	bl	80016d0 <HAL_RCC_GetPCLK1Freq>
 8001fd0:	0003      	movs	r3, r0
 8001fd2:	61bb      	str	r3, [r7, #24]
        break;
 8001fd4:	e012      	b.n	8001ffc <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001fd6:	4b28      	ldr	r3, [pc, #160]	; (8002078 <UART_SetConfig+0x300>)
 8001fd8:	61bb      	str	r3, [r7, #24]
        break;
 8001fda:	e00f      	b.n	8001ffc <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001fdc:	f7ff faf0 	bl	80015c0 <HAL_RCC_GetSysClockFreq>
 8001fe0:	0003      	movs	r3, r0
 8001fe2:	61bb      	str	r3, [r7, #24]
        break;
 8001fe4:	e00a      	b.n	8001ffc <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001fe6:	2380      	movs	r3, #128	; 0x80
 8001fe8:	021b      	lsls	r3, r3, #8
 8001fea:	61bb      	str	r3, [r7, #24]
        break;
 8001fec:	e006      	b.n	8001ffc <UART_SetConfig+0x284>
      default:
        pclk = 0U;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001ff2:	231e      	movs	r3, #30
 8001ff4:	18fb      	adds	r3, r7, r3
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	701a      	strb	r2, [r3, #0]
        break;
 8001ffa:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d01d      	beq.n	800203e <UART_SetConfig+0x2c6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	085a      	lsrs	r2, r3, #1
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	18d2      	adds	r2, r2, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	0019      	movs	r1, r3
 8002012:	0010      	movs	r0, r2
 8002014:	f7fe f878 	bl	8000108 <__udivsi3>
 8002018:	0003      	movs	r3, r0
 800201a:	b29b      	uxth	r3, r3
 800201c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	2b0f      	cmp	r3, #15
 8002022:	d908      	bls.n	8002036 <UART_SetConfig+0x2be>
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	4a15      	ldr	r2, [pc, #84]	; (800207c <UART_SetConfig+0x304>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d804      	bhi.n	8002036 <UART_SetConfig+0x2be>
      {
        huart->Instance->BRR = usartdiv;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	693a      	ldr	r2, [r7, #16]
 8002032:	60da      	str	r2, [r3, #12]
 8002034:	e003      	b.n	800203e <UART_SetConfig+0x2c6>
      }
      else
      {
        ret = HAL_ERROR;
 8002036:	231e      	movs	r3, #30
 8002038:	18fb      	adds	r3, r7, r3
 800203a:	2201      	movs	r2, #1
 800203c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800204a:	231e      	movs	r3, #30
 800204c:	18fb      	adds	r3, r7, r3
 800204e:	781b      	ldrb	r3, [r3, #0]
}
 8002050:	0018      	movs	r0, r3
 8002052:	46bd      	mov	sp, r7
 8002054:	b008      	add	sp, #32
 8002056:	bd80      	pop	{r7, pc}
 8002058:	efff69f3 	.word	0xefff69f3
 800205c:	ffffcfff 	.word	0xffffcfff
 8002060:	fffff4ff 	.word	0xfffff4ff
 8002064:	40013800 	.word	0x40013800
 8002068:	40021000 	.word	0x40021000
 800206c:	40004400 	.word	0x40004400
 8002070:	40004800 	.word	0x40004800
 8002074:	40004c00 	.word	0x40004c00
 8002078:	007a1200 	.word	0x007a1200
 800207c:	0000ffff 	.word	0x0000ffff

08002080 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208c:	2201      	movs	r2, #1
 800208e:	4013      	ands	r3, r2
 8002090:	d00b      	beq.n	80020aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	4a4a      	ldr	r2, [pc, #296]	; (80021c4 <UART_AdvFeatureConfig+0x144>)
 800209a:	4013      	ands	r3, r2
 800209c:	0019      	movs	r1, r3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	430a      	orrs	r2, r1
 80020a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ae:	2202      	movs	r2, #2
 80020b0:	4013      	ands	r3, r2
 80020b2:	d00b      	beq.n	80020cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	4a43      	ldr	r2, [pc, #268]	; (80021c8 <UART_AdvFeatureConfig+0x148>)
 80020bc:	4013      	ands	r3, r2
 80020be:	0019      	movs	r1, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	430a      	orrs	r2, r1
 80020ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d0:	2204      	movs	r2, #4
 80020d2:	4013      	ands	r3, r2
 80020d4:	d00b      	beq.n	80020ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	4a3b      	ldr	r2, [pc, #236]	; (80021cc <UART_AdvFeatureConfig+0x14c>)
 80020de:	4013      	ands	r3, r2
 80020e0:	0019      	movs	r1, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	430a      	orrs	r2, r1
 80020ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f2:	2208      	movs	r2, #8
 80020f4:	4013      	ands	r3, r2
 80020f6:	d00b      	beq.n	8002110 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	4a34      	ldr	r2, [pc, #208]	; (80021d0 <UART_AdvFeatureConfig+0x150>)
 8002100:	4013      	ands	r3, r2
 8002102:	0019      	movs	r1, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	430a      	orrs	r2, r1
 800210e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002114:	2210      	movs	r2, #16
 8002116:	4013      	ands	r3, r2
 8002118:	d00b      	beq.n	8002132 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	4a2c      	ldr	r2, [pc, #176]	; (80021d4 <UART_AdvFeatureConfig+0x154>)
 8002122:	4013      	ands	r3, r2
 8002124:	0019      	movs	r1, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	430a      	orrs	r2, r1
 8002130:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002136:	2220      	movs	r2, #32
 8002138:	4013      	ands	r3, r2
 800213a:	d00b      	beq.n	8002154 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	4a25      	ldr	r2, [pc, #148]	; (80021d8 <UART_AdvFeatureConfig+0x158>)
 8002144:	4013      	ands	r3, r2
 8002146:	0019      	movs	r1, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	430a      	orrs	r2, r1
 8002152:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002158:	2240      	movs	r2, #64	; 0x40
 800215a:	4013      	ands	r3, r2
 800215c:	d01d      	beq.n	800219a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	4a1d      	ldr	r2, [pc, #116]	; (80021dc <UART_AdvFeatureConfig+0x15c>)
 8002166:	4013      	ands	r3, r2
 8002168:	0019      	movs	r1, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	430a      	orrs	r2, r1
 8002174:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800217a:	2380      	movs	r3, #128	; 0x80
 800217c:	035b      	lsls	r3, r3, #13
 800217e:	429a      	cmp	r2, r3
 8002180:	d10b      	bne.n	800219a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	4a15      	ldr	r2, [pc, #84]	; (80021e0 <UART_AdvFeatureConfig+0x160>)
 800218a:	4013      	ands	r3, r2
 800218c:	0019      	movs	r1, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	430a      	orrs	r2, r1
 8002198:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219e:	2280      	movs	r2, #128	; 0x80
 80021a0:	4013      	ands	r3, r2
 80021a2:	d00b      	beq.n	80021bc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	4a0e      	ldr	r2, [pc, #56]	; (80021e4 <UART_AdvFeatureConfig+0x164>)
 80021ac:	4013      	ands	r3, r2
 80021ae:	0019      	movs	r1, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	430a      	orrs	r2, r1
 80021ba:	605a      	str	r2, [r3, #4]
  }
}
 80021bc:	46c0      	nop			; (mov r8, r8)
 80021be:	46bd      	mov	sp, r7
 80021c0:	b002      	add	sp, #8
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	fffdffff 	.word	0xfffdffff
 80021c8:	fffeffff 	.word	0xfffeffff
 80021cc:	fffbffff 	.word	0xfffbffff
 80021d0:	ffff7fff 	.word	0xffff7fff
 80021d4:	ffffefff 	.word	0xffffefff
 80021d8:	ffffdfff 	.word	0xffffdfff
 80021dc:	ffefffff 	.word	0xffefffff
 80021e0:	ff9fffff 	.word	0xff9fffff
 80021e4:	fff7ffff 	.word	0xfff7ffff

080021e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b086      	sub	sp, #24
 80021ec:	af02      	add	r7, sp, #8
 80021ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2280      	movs	r2, #128	; 0x80
 80021f4:	2100      	movs	r1, #0
 80021f6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80021f8:	f7fe fa4e 	bl	8000698 <HAL_GetTick>
 80021fc:	0003      	movs	r3, r0
 80021fe:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	2208      	movs	r2, #8
 8002208:	4013      	ands	r3, r2
 800220a:	2b08      	cmp	r3, #8
 800220c:	d10d      	bne.n	800222a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800220e:	68fa      	ldr	r2, [r7, #12]
 8002210:	2380      	movs	r3, #128	; 0x80
 8002212:	0399      	lsls	r1, r3, #14
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	4b18      	ldr	r3, [pc, #96]	; (8002278 <UART_CheckIdleState+0x90>)
 8002218:	9300      	str	r3, [sp, #0]
 800221a:	0013      	movs	r3, r2
 800221c:	2200      	movs	r2, #0
 800221e:	f000 f82d 	bl	800227c <UART_WaitOnFlagUntilTimeout>
 8002222:	1e03      	subs	r3, r0, #0
 8002224:	d001      	beq.n	800222a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e022      	b.n	8002270 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2204      	movs	r2, #4
 8002232:	4013      	ands	r3, r2
 8002234:	2b04      	cmp	r3, #4
 8002236:	d10d      	bne.n	8002254 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002238:	68fa      	ldr	r2, [r7, #12]
 800223a:	2380      	movs	r3, #128	; 0x80
 800223c:	03d9      	lsls	r1, r3, #15
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	4b0d      	ldr	r3, [pc, #52]	; (8002278 <UART_CheckIdleState+0x90>)
 8002242:	9300      	str	r3, [sp, #0]
 8002244:	0013      	movs	r3, r2
 8002246:	2200      	movs	r2, #0
 8002248:	f000 f818 	bl	800227c <UART_WaitOnFlagUntilTimeout>
 800224c:	1e03      	subs	r3, r0, #0
 800224e:	d001      	beq.n	8002254 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e00d      	b.n	8002270 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2220      	movs	r2, #32
 8002258:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2220      	movs	r2, #32
 800225e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2274      	movs	r2, #116	; 0x74
 800226a:	2100      	movs	r1, #0
 800226c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800226e:	2300      	movs	r3, #0
}
 8002270:	0018      	movs	r0, r3
 8002272:	46bd      	mov	sp, r7
 8002274:	b004      	add	sp, #16
 8002276:	bd80      	pop	{r7, pc}
 8002278:	01ffffff 	.word	0x01ffffff

0800227c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	60b9      	str	r1, [r7, #8]
 8002286:	603b      	str	r3, [r7, #0]
 8002288:	1dfb      	adds	r3, r7, #7
 800228a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800228c:	e05e      	b.n	800234c <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	3301      	adds	r3, #1
 8002292:	d05b      	beq.n	800234c <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002294:	f7fe fa00 	bl	8000698 <HAL_GetTick>
 8002298:	0002      	movs	r2, r0
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d302      	bcc.n	80022aa <UART_WaitOnFlagUntilTimeout+0x2e>
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d11b      	bne.n	80022e2 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	492f      	ldr	r1, [pc, #188]	; (8002374 <UART_WaitOnFlagUntilTimeout+0xf8>)
 80022b6:	400a      	ands	r2, r1
 80022b8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	689a      	ldr	r2, [r3, #8]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2101      	movs	r1, #1
 80022c6:	438a      	bics	r2, r1
 80022c8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2220      	movs	r2, #32
 80022ce:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2220      	movs	r2, #32
 80022d4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2274      	movs	r2, #116	; 0x74
 80022da:	2100      	movs	r1, #0
 80022dc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e044      	b.n	800236c <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2204      	movs	r2, #4
 80022ea:	4013      	ands	r3, r2
 80022ec:	d02e      	beq.n	800234c <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	69da      	ldr	r2, [r3, #28]
 80022f4:	2380      	movs	r3, #128	; 0x80
 80022f6:	011b      	lsls	r3, r3, #4
 80022f8:	401a      	ands	r2, r3
 80022fa:	2380      	movs	r3, #128	; 0x80
 80022fc:	011b      	lsls	r3, r3, #4
 80022fe:	429a      	cmp	r2, r3
 8002300:	d124      	bne.n	800234c <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2280      	movs	r2, #128	; 0x80
 8002308:	0112      	lsls	r2, r2, #4
 800230a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4917      	ldr	r1, [pc, #92]	; (8002374 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002318:	400a      	ands	r2, r1
 800231a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	689a      	ldr	r2, [r3, #8]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2101      	movs	r1, #1
 8002328:	438a      	bics	r2, r1
 800232a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2220      	movs	r2, #32
 8002330:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2220      	movs	r2, #32
 8002336:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2280      	movs	r2, #128	; 0x80
 800233c:	2120      	movs	r1, #32
 800233e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2274      	movs	r2, #116	; 0x74
 8002344:	2100      	movs	r1, #0
 8002346:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e00f      	b.n	800236c <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	69db      	ldr	r3, [r3, #28]
 8002352:	68ba      	ldr	r2, [r7, #8]
 8002354:	4013      	ands	r3, r2
 8002356:	68ba      	ldr	r2, [r7, #8]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	425a      	negs	r2, r3
 800235c:	4153      	adcs	r3, r2
 800235e:	b2db      	uxtb	r3, r3
 8002360:	001a      	movs	r2, r3
 8002362:	1dfb      	adds	r3, r7, #7
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	429a      	cmp	r2, r3
 8002368:	d091      	beq.n	800228e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800236a:	2300      	movs	r3, #0
}
 800236c:	0018      	movs	r0, r3
 800236e:	46bd      	mov	sp, r7
 8002370:	b004      	add	sp, #16
 8002372:	bd80      	pop	{r7, pc}
 8002374:	fffffe5f 	.word	0xfffffe5f

08002378 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	1dbb      	adds	r3, r7, #6
 8002384:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	68ba      	ldr	r2, [r7, #8]
 800238a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	1dba      	adds	r2, r7, #6
 8002390:	2158      	movs	r1, #88	; 0x58
 8002392:	8812      	ldrh	r2, [r2, #0]
 8002394:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	1dba      	adds	r2, r7, #6
 800239a:	215a      	movs	r1, #90	; 0x5a
 800239c:	8812      	ldrh	r2, [r2, #0]
 800239e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2200      	movs	r2, #0
 80023a4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	689a      	ldr	r2, [r3, #8]
 80023aa:	2380      	movs	r3, #128	; 0x80
 80023ac:	015b      	lsls	r3, r3, #5
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d10d      	bne.n	80023ce <UART_Start_Receive_IT+0x56>
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d104      	bne.n	80023c4 <UART_Start_Receive_IT+0x4c>
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	225c      	movs	r2, #92	; 0x5c
 80023be:	4932      	ldr	r1, [pc, #200]	; (8002488 <UART_Start_Receive_IT+0x110>)
 80023c0:	5299      	strh	r1, [r3, r2]
 80023c2:	e02e      	b.n	8002422 <UART_Start_Receive_IT+0xaa>
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	225c      	movs	r2, #92	; 0x5c
 80023c8:	21ff      	movs	r1, #255	; 0xff
 80023ca:	5299      	strh	r1, [r3, r2]
 80023cc:	e029      	b.n	8002422 <UART_Start_Receive_IT+0xaa>
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d10d      	bne.n	80023f2 <UART_Start_Receive_IT+0x7a>
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	691b      	ldr	r3, [r3, #16]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d104      	bne.n	80023e8 <UART_Start_Receive_IT+0x70>
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	225c      	movs	r2, #92	; 0x5c
 80023e2:	21ff      	movs	r1, #255	; 0xff
 80023e4:	5299      	strh	r1, [r3, r2]
 80023e6:	e01c      	b.n	8002422 <UART_Start_Receive_IT+0xaa>
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	225c      	movs	r2, #92	; 0x5c
 80023ec:	217f      	movs	r1, #127	; 0x7f
 80023ee:	5299      	strh	r1, [r3, r2]
 80023f0:	e017      	b.n	8002422 <UART_Start_Receive_IT+0xaa>
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	689a      	ldr	r2, [r3, #8]
 80023f6:	2380      	movs	r3, #128	; 0x80
 80023f8:	055b      	lsls	r3, r3, #21
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d10d      	bne.n	800241a <UART_Start_Receive_IT+0xa2>
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d104      	bne.n	8002410 <UART_Start_Receive_IT+0x98>
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	225c      	movs	r2, #92	; 0x5c
 800240a:	217f      	movs	r1, #127	; 0x7f
 800240c:	5299      	strh	r1, [r3, r2]
 800240e:	e008      	b.n	8002422 <UART_Start_Receive_IT+0xaa>
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	225c      	movs	r2, #92	; 0x5c
 8002414:	213f      	movs	r1, #63	; 0x3f
 8002416:	5299      	strh	r1, [r3, r2]
 8002418:	e003      	b.n	8002422 <UART_Start_Receive_IT+0xaa>
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	225c      	movs	r2, #92	; 0x5c
 800241e:	2100      	movs	r1, #0
 8002420:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2280      	movs	r2, #128	; 0x80
 8002426:	2100      	movs	r1, #0
 8002428:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2222      	movs	r2, #34	; 0x22
 800242e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	689a      	ldr	r2, [r3, #8]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	2101      	movs	r1, #1
 800243c:	430a      	orrs	r2, r1
 800243e:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	689a      	ldr	r2, [r3, #8]
 8002444:	2380      	movs	r3, #128	; 0x80
 8002446:	015b      	lsls	r3, r3, #5
 8002448:	429a      	cmp	r2, r3
 800244a:	d107      	bne.n	800245c <UART_Start_Receive_IT+0xe4>
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	691b      	ldr	r3, [r3, #16]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d103      	bne.n	800245c <UART_Start_Receive_IT+0xe4>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	4a0d      	ldr	r2, [pc, #52]	; (800248c <UART_Start_Receive_IT+0x114>)
 8002458:	665a      	str	r2, [r3, #100]	; 0x64
 800245a:	e002      	b.n	8002462 <UART_Start_Receive_IT+0xea>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	4a0c      	ldr	r2, [pc, #48]	; (8002490 <UART_Start_Receive_IT+0x118>)
 8002460:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2274      	movs	r2, #116	; 0x74
 8002466:	2100      	movs	r1, #0
 8002468:	5499      	strb	r1, [r3, r2]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2190      	movs	r1, #144	; 0x90
 8002476:	0049      	lsls	r1, r1, #1
 8002478:	430a      	orrs	r2, r1
 800247a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800247c:	2300      	movs	r3, #0
}
 800247e:	0018      	movs	r0, r3
 8002480:	46bd      	mov	sp, r7
 8002482:	b004      	add	sp, #16
 8002484:	bd80      	pop	{r7, pc}
 8002486:	46c0      	nop			; (mov r8, r8)
 8002488:	000001ff 	.word	0x000001ff
 800248c:	0800272d 	.word	0x0800272d
 8002490:	08002641 	.word	0x08002641

08002494 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4912      	ldr	r1, [pc, #72]	; (80024f0 <UART_EndRxTransfer+0x5c>)
 80024a8:	400a      	ands	r2, r1
 80024aa:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	689a      	ldr	r2, [r3, #8]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2101      	movs	r1, #1
 80024b8:	438a      	bics	r2, r1
 80024ba:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d107      	bne.n	80024d4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2110      	movs	r1, #16
 80024d0:	438a      	bics	r2, r1
 80024d2:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2220      	movs	r2, #32
 80024d8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2200      	movs	r2, #0
 80024e4:	665a      	str	r2, [r3, #100]	; 0x64
}
 80024e6:	46c0      	nop			; (mov r8, r8)
 80024e8:	46bd      	mov	sp, r7
 80024ea:	b002      	add	sp, #8
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	46c0      	nop			; (mov r8, r8)
 80024f0:	fffffedf 	.word	0xfffffedf

080024f4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002500:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	225a      	movs	r2, #90	; 0x5a
 8002506:	2100      	movs	r1, #0
 8002508:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2252      	movs	r2, #82	; 0x52
 800250e:	2100      	movs	r1, #0
 8002510:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	0018      	movs	r0, r3
 8002516:	f7ff fc1b 	bl	8001d50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800251a:	46c0      	nop			; (mov r8, r8)
 800251c:	46bd      	mov	sp, r7
 800251e:	b004      	add	sp, #16
 8002520:	bd80      	pop	{r7, pc}

08002522 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8002522:	b580      	push	{r7, lr}
 8002524:	b082      	sub	sp, #8
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800252e:	2b21      	cmp	r3, #33	; 0x21
 8002530:	d12b      	bne.n	800258a <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2252      	movs	r2, #82	; 0x52
 8002536:	5a9b      	ldrh	r3, [r3, r2]
 8002538:	b29b      	uxth	r3, r3
 800253a:	2b00      	cmp	r3, #0
 800253c:	d110      	bne.n	8002560 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2180      	movs	r1, #128	; 0x80
 800254a:	438a      	bics	r2, r1
 800254c:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2140      	movs	r1, #64	; 0x40
 800255a:	430a      	orrs	r2, r1
 800255c:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800255e:	e014      	b.n	800258a <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002564:	781a      	ldrb	r2, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	b292      	uxth	r2, r2
 800256c:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002572:	1c5a      	adds	r2, r3, #1
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2252      	movs	r2, #82	; 0x52
 800257c:	5a9b      	ldrh	r3, [r3, r2]
 800257e:	b29b      	uxth	r3, r3
 8002580:	3b01      	subs	r3, #1
 8002582:	b299      	uxth	r1, r3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2252      	movs	r2, #82	; 0x52
 8002588:	5299      	strh	r1, [r3, r2]
}
 800258a:	46c0      	nop			; (mov r8, r8)
 800258c:	46bd      	mov	sp, r7
 800258e:	b002      	add	sp, #8
 8002590:	bd80      	pop	{r7, pc}

08002592 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8002592:	b580      	push	{r7, lr}
 8002594:	b084      	sub	sp, #16
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800259e:	2b21      	cmp	r3, #33	; 0x21
 80025a0:	d12f      	bne.n	8002602 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2252      	movs	r2, #82	; 0x52
 80025a6:	5a9b      	ldrh	r3, [r3, r2]
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d110      	bne.n	80025d0 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2180      	movs	r1, #128	; 0x80
 80025ba:	438a      	bics	r2, r1
 80025bc:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2140      	movs	r1, #64	; 0x40
 80025ca:	430a      	orrs	r2, r1
 80025cc:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80025ce:	e018      	b.n	8002602 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025d4:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	881a      	ldrh	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	05d2      	lsls	r2, r2, #23
 80025e0:	0dd2      	lsrs	r2, r2, #23
 80025e2:	b292      	uxth	r2, r2
 80025e4:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ea:	1c9a      	adds	r2, r3, #2
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2252      	movs	r2, #82	; 0x52
 80025f4:	5a9b      	ldrh	r3, [r3, r2]
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	3b01      	subs	r3, #1
 80025fa:	b299      	uxth	r1, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2252      	movs	r2, #82	; 0x52
 8002600:	5299      	strh	r1, [r3, r2]
}
 8002602:	46c0      	nop			; (mov r8, r8)
 8002604:	46bd      	mov	sp, r7
 8002606:	b004      	add	sp, #16
 8002608:	bd80      	pop	{r7, pc}

0800260a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800260a:	b580      	push	{r7, lr}
 800260c:	b082      	sub	sp, #8
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2140      	movs	r1, #64	; 0x40
 800261e:	438a      	bics	r2, r1
 8002620:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2220      	movs	r2, #32
 8002626:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	0018      	movs	r0, r3
 8002632:	f7ff fb7d 	bl	8001d30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002636:	46c0      	nop			; (mov r8, r8)
 8002638:	46bd      	mov	sp, r7
 800263a:	b002      	add	sp, #8
 800263c:	bd80      	pop	{r7, pc}
	...

08002640 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8002648:	230e      	movs	r3, #14
 800264a:	18fb      	adds	r3, r7, r3
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	215c      	movs	r1, #92	; 0x5c
 8002650:	5a52      	ldrh	r2, [r2, r1]
 8002652:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002658:	2b22      	cmp	r3, #34	; 0x22
 800265a:	d158      	bne.n	800270e <UART_RxISR_8BIT+0xce>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	210c      	movs	r1, #12
 8002662:	187b      	adds	r3, r7, r1
 8002664:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8002666:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002668:	187b      	adds	r3, r7, r1
 800266a:	881b      	ldrh	r3, [r3, #0]
 800266c:	b2da      	uxtb	r2, r3
 800266e:	230e      	movs	r3, #14
 8002670:	18fb      	adds	r3, r7, r3
 8002672:	881b      	ldrh	r3, [r3, #0]
 8002674:	b2d9      	uxtb	r1, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800267a:	400a      	ands	r2, r1
 800267c:	b2d2      	uxtb	r2, r2
 800267e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002684:	1c5a      	adds	r2, r3, #1
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	225a      	movs	r2, #90	; 0x5a
 800268e:	5a9b      	ldrh	r3, [r3, r2]
 8002690:	b29b      	uxth	r3, r3
 8002692:	3b01      	subs	r3, #1
 8002694:	b299      	uxth	r1, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	225a      	movs	r2, #90	; 0x5a
 800269a:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	225a      	movs	r2, #90	; 0x5a
 80026a0:	5a9b      	ldrh	r3, [r3, r2]
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d13a      	bne.n	800271e <UART_RxISR_8BIT+0xde>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	491d      	ldr	r1, [pc, #116]	; (8002728 <UART_RxISR_8BIT+0xe8>)
 80026b4:	400a      	ands	r2, r1
 80026b6:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	689a      	ldr	r2, [r3, #8]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2101      	movs	r1, #1
 80026c4:	438a      	bics	r2, r1
 80026c6:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2220      	movs	r2, #32
 80026cc:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d110      	bne.n	80026fe <UART_RxISR_8BIT+0xbe>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2110      	movs	r1, #16
 80026e8:	438a      	bics	r2, r1
 80026ea:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2258      	movs	r2, #88	; 0x58
 80026f0:	5a9a      	ldrh	r2, [r3, r2]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	0011      	movs	r1, r2
 80026f6:	0018      	movs	r0, r3
 80026f8:	f7ff fb32 	bl	8001d60 <HAL_UARTEx_RxEventCallback>
 80026fc:	e003      	b.n	8002706 <UART_RxISR_8BIT+0xc6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	0018      	movs	r0, r3
 8002702:	f7ff fb1d 	bl	8001d40 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800270c:	e007      	b.n	800271e <UART_RxISR_8BIT+0xde>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	699a      	ldr	r2, [r3, #24]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2108      	movs	r1, #8
 800271a:	430a      	orrs	r2, r1
 800271c:	619a      	str	r2, [r3, #24]
}
 800271e:	46c0      	nop			; (mov r8, r8)
 8002720:	46bd      	mov	sp, r7
 8002722:	b004      	add	sp, #16
 8002724:	bd80      	pop	{r7, pc}
 8002726:	46c0      	nop			; (mov r8, r8)
 8002728:	fffffedf 	.word	0xfffffedf

0800272c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8002734:	230e      	movs	r3, #14
 8002736:	18fb      	adds	r3, r7, r3
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	215c      	movs	r1, #92	; 0x5c
 800273c:	5a52      	ldrh	r2, [r2, r1]
 800273e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002744:	2b22      	cmp	r3, #34	; 0x22
 8002746:	d158      	bne.n	80027fa <UART_RxISR_16BIT+0xce>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	210c      	movs	r1, #12
 800274e:	187b      	adds	r3, r7, r1
 8002750:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8002752:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002758:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800275a:	187b      	adds	r3, r7, r1
 800275c:	220e      	movs	r2, #14
 800275e:	18ba      	adds	r2, r7, r2
 8002760:	881b      	ldrh	r3, [r3, #0]
 8002762:	8812      	ldrh	r2, [r2, #0]
 8002764:	4013      	ands	r3, r2
 8002766:	b29a      	uxth	r2, r3
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002770:	1c9a      	adds	r2, r3, #2
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	225a      	movs	r2, #90	; 0x5a
 800277a:	5a9b      	ldrh	r3, [r3, r2]
 800277c:	b29b      	uxth	r3, r3
 800277e:	3b01      	subs	r3, #1
 8002780:	b299      	uxth	r1, r3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	225a      	movs	r2, #90	; 0x5a
 8002786:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	225a      	movs	r2, #90	; 0x5a
 800278c:	5a9b      	ldrh	r3, [r3, r2]
 800278e:	b29b      	uxth	r3, r3
 8002790:	2b00      	cmp	r3, #0
 8002792:	d13a      	bne.n	800280a <UART_RxISR_16BIT+0xde>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	491d      	ldr	r1, [pc, #116]	; (8002814 <UART_RxISR_16BIT+0xe8>)
 80027a0:	400a      	ands	r2, r1
 80027a2:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	689a      	ldr	r2, [r3, #8]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2101      	movs	r1, #1
 80027b0:	438a      	bics	r2, r1
 80027b2:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2220      	movs	r2, #32
 80027b8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d110      	bne.n	80027ea <UART_RxISR_16BIT+0xbe>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	2110      	movs	r1, #16
 80027d4:	438a      	bics	r2, r1
 80027d6:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2258      	movs	r2, #88	; 0x58
 80027dc:	5a9a      	ldrh	r2, [r3, r2]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	0011      	movs	r1, r2
 80027e2:	0018      	movs	r0, r3
 80027e4:	f7ff fabc 	bl	8001d60 <HAL_UARTEx_RxEventCallback>
 80027e8:	e003      	b.n	80027f2 <UART_RxISR_16BIT+0xc6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	0018      	movs	r0, r3
 80027ee:	f7ff faa7 	bl	8001d40 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80027f8:	e007      	b.n	800280a <UART_RxISR_16BIT+0xde>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	699a      	ldr	r2, [r3, #24]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2108      	movs	r1, #8
 8002806:	430a      	orrs	r2, r1
 8002808:	619a      	str	r2, [r3, #24]
}
 800280a:	46c0      	nop			; (mov r8, r8)
 800280c:	46bd      	mov	sp, r7
 800280e:	b004      	add	sp, #16
 8002810:	bd80      	pop	{r7, pc}
 8002812:	46c0      	nop			; (mov r8, r8)
 8002814:	fffffedf 	.word	0xfffffedf

08002818 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8002820:	46c0      	nop			; (mov r8, r8)
 8002822:	46bd      	mov	sp, r7
 8002824:	b002      	add	sp, #8
 8002826:	bd80      	pop	{r7, pc}

08002828 <__libc_init_array>:
 8002828:	b570      	push	{r4, r5, r6, lr}
 800282a:	2600      	movs	r6, #0
 800282c:	4d0c      	ldr	r5, [pc, #48]	; (8002860 <__libc_init_array+0x38>)
 800282e:	4c0d      	ldr	r4, [pc, #52]	; (8002864 <__libc_init_array+0x3c>)
 8002830:	1b64      	subs	r4, r4, r5
 8002832:	10a4      	asrs	r4, r4, #2
 8002834:	42a6      	cmp	r6, r4
 8002836:	d109      	bne.n	800284c <__libc_init_array+0x24>
 8002838:	2600      	movs	r6, #0
 800283a:	f000 f821 	bl	8002880 <_init>
 800283e:	4d0a      	ldr	r5, [pc, #40]	; (8002868 <__libc_init_array+0x40>)
 8002840:	4c0a      	ldr	r4, [pc, #40]	; (800286c <__libc_init_array+0x44>)
 8002842:	1b64      	subs	r4, r4, r5
 8002844:	10a4      	asrs	r4, r4, #2
 8002846:	42a6      	cmp	r6, r4
 8002848:	d105      	bne.n	8002856 <__libc_init_array+0x2e>
 800284a:	bd70      	pop	{r4, r5, r6, pc}
 800284c:	00b3      	lsls	r3, r6, #2
 800284e:	58eb      	ldr	r3, [r5, r3]
 8002850:	4798      	blx	r3
 8002852:	3601      	adds	r6, #1
 8002854:	e7ee      	b.n	8002834 <__libc_init_array+0xc>
 8002856:	00b3      	lsls	r3, r6, #2
 8002858:	58eb      	ldr	r3, [r5, r3]
 800285a:	4798      	blx	r3
 800285c:	3601      	adds	r6, #1
 800285e:	e7f2      	b.n	8002846 <__libc_init_array+0x1e>
 8002860:	080028d0 	.word	0x080028d0
 8002864:	080028d0 	.word	0x080028d0
 8002868:	080028d0 	.word	0x080028d0
 800286c:	080028d4 	.word	0x080028d4

08002870 <memset>:
 8002870:	0003      	movs	r3, r0
 8002872:	1812      	adds	r2, r2, r0
 8002874:	4293      	cmp	r3, r2
 8002876:	d100      	bne.n	800287a <memset+0xa>
 8002878:	4770      	bx	lr
 800287a:	7019      	strb	r1, [r3, #0]
 800287c:	3301      	adds	r3, #1
 800287e:	e7f9      	b.n	8002874 <memset+0x4>

08002880 <_init>:
 8002880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002882:	46c0      	nop			; (mov r8, r8)
 8002884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002886:	bc08      	pop	{r3}
 8002888:	469e      	mov	lr, r3
 800288a:	4770      	bx	lr

0800288c <_fini>:
 800288c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800288e:	46c0      	nop			; (mov r8, r8)
 8002890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002892:	bc08      	pop	{r3}
 8002894:	469e      	mov	lr, r3
 8002896:	4770      	bx	lr
